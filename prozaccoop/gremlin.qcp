/*
==============================================================================

gremlin (from hipnotic mission pack)

Modified by OfteN [cp] on 04/07/2004

==============================================================================

Usage of entity fields:
-----------------------

For the gremlin entity:

ORIGINAL FIELD	 CURRENT FIELD

.stoleweapon -> .has_fieldgen
.gorging	 -> .has_camera TOFIX: Used on targets for gorging (conflict with camera flag)
.lastvictim  -> .martyr_enemy

==============================================================================
*/

$cd hipwork\models\grem
$origin 0 0 23
$scale 2
$base grembase

$skin grem

$frame stand1 stand2 stand3 stand4 stand5 stand6
$frame stand7 stand8 stand9 stand10 stand11 stand12
$frame stand13 stand14 stand15 stand16 stand17

$frame walk1 walk2 walk3 walk4 walk5 walk6
$frame walk7 walk8 walk9 walk10 walk11 walk12

$frame run1 run2 run3 run4 run5 run6 run7 run8
$frame run9 run10 run11 run12 run13 run14 run15

$frame jump1 jump2 jump3 jump4 jump5 jump6 jump7
$frame jump8 jump9 jump10 jump11 jump12 jump13 jump14
$frame jump15 jump16

$frame attk1 attk2 attk3 attk4 attk5 attk6
$frame attk7 attk8 attk9 attk10 attk11

$frame maul1 maul2 maul3 maul4 maul5 maul6
$frame maul7 maul8 maul9 maul10 maul11 maul12 maul13

$frame spawn1 spawn2 spawn3 spawn4 spawn5 spawn6

$frame look1 look2 look3 look4 look5 look6 look7
$frame look8 look9 look10

$frame pain1 pain2 pain3 pain4

$frame death1 death2 death3 death4 death5 death6 death7
$frame death8 death9 death10 death11 death12

$frame flip1 flip2 flip3 flip4 flip5 flip6 flip7
$frame flip8

$frame lunge1 lunge2 lunge3 lunge4 lunge5 lunge6 lunge7
$frame lunge8 lunge9 lunge10 lunge11

$frame gfire1 gfire2 gfire3 gfire4 gfire5 gfire6

$frame glook1 glook2 glook3 glook4 glook5 glook6 glook7
$frame glook8 glook9 glook10 glook11 glook12 glook13
$frame glook14 glook15 glook16 glook17 glook18 glook19 glook20

$frame gpain1 gpain2 gpain3

$frame grun1 grun2 grun3 grun4 grun5 grun6 grun7
$frame grun8 grun9 grun10 grun11 grun12 grun13 grun14 grun15

//============================================================================

float NumGremlins;
float NumSpawnGremlins;

void (entity srcent, entity destent) SUB_CopyEntity;

void(entity ent) MuzzleFlash;

/*
===========
GremlinAttemptWeaponSteal

see if we can steal enemy's weapon
============
*/
entity()GremlinFindVictim;
float() GremlinFindTarget;

float() GremlinAttemptWeaponSteal =
{
	local vector delta;
	local entity tempself;
	local float best;
	local entity victim;
	local float amount;

	if (self.has_fieldgen)
	{
		RPrint("gremlin trying to steal a weapon again\n");
		return 0;
	}
	if (!(self.enemy.flags & 8))
	{
		return 0;
	}

	delta = (self.enemy.origin - self.origin);

	if (vlen(delta) > 100)
		return 0;
	if (random() < 0.5)
		return 0;
	//
	// we are within range so lets go for it
	//
	victim = self.enemy;
	best = victim.weapon;
	if (best == 4096 || best == 1)// || best == #IT_MJOLNIR)
		return 0;
	// take that weapon from the entity
	victim.items = victim.items - (victim.items & best);
	// give it to our gremlin
	self.items = self.items | best;
	self.weapon = best;
	// take some ammo while we are at it
	self.items = self.items - ( self.items & (256 | 512 | 1024 | 2048 ) );
	if (best == 2)
	{
		amount = victim.ammo_shells;
		if (amount > 20)
			amount = 20;
		victim.ammo_shells = victim.ammo_shells - amount;
		self.ammo_shells = self.ammo_shells + amount;
		self.items = self.items | 256;
		self.currentammo = self.ammo_shells;
		sprint (victim,2, "Gremlin stole your Super Shotgun\n");
	}
	else if (best == 4)
	{
		amount = victim.ammo_nails;
		if (amount > 40)
			amount = 40;
		victim.ammo_nails = victim.ammo_nails - amount;
		self.ammo_nails = self.ammo_nails + amount;
		self.items = self.items | 512;
		self.currentammo = self.ammo_nails;
		sprint (victim,2, "Gremlin stole your Nailgun\n");
	}
	else if (best == 8)
	{
		amount = victim.ammo_nails;
		if (amount > 40)
			amount = 40;
		victim.ammo_nails = victim.ammo_nails - amount;
		self.ammo_nails = self.ammo_nails + amount;
		self.items = self.items | 512;
		self.currentammo = self.ammo_nails;
		sprint (victim,2, "Gremlin stole your Super Nailgun\n");
	}
	else if (best == 16)
	{
		amount = victim.ammo_rockets;
		if (amount > 5)
			amount = 5;
		victim.ammo_rockets = victim.ammo_rockets - amount;
		self.ammo_rockets = self.ammo_rockets + amount;
		self.items = self.items | 1024;
		self.currentammo = self.ammo_rockets;
		sprint (victim,2, "Gremlin stole your Grenade Launcher\n");
	}
	else if (best == 32)
	{
		amount = victim.ammo_rockets;
		/*if (amount > 5)
			amount = 5;*/
		amount = amount * 0.75;
		if (amount < 25)
			amount = victim.ammo_rockets;
	   
		victim.ammo_rockets = victim.ammo_rockets - amount;
		self.ammo_rockets = self.ammo_rockets + amount;
		self.items = self.items | 1024;
		self.currentammo = self.ammo_rockets;
		sprint (victim,2, "Gremlin stole your Rocket Launcher\n");
	}
	else if (best == 64)
	{
		amount = victim.ammo_cells;
		if (amount > 40)
			amount = 40;
		victim.ammo_cells = victim.ammo_cells - amount;
		self.ammo_cells = self.ammo_cells + amount;
		self.items = self.items | 2048;
		self.currentammo = self.ammo_cells;
		sprint (victim,2, "Gremlin stole your Lightning Gun\n");
	}
	/*else if (best == #IT_LASER_CANNON)
	{
		amount = victim.ammo_cells;
		if (amount > 40)
			amount = 40;
		victim.ammo_cells = victim.ammo_cells - amount;
		self.ammo_cells = self.ammo_cells + amount;
		self.items = self.items | #IT_CELLS;
		self.currentammo = self.ammo_cells;
		sprint (victim, "Gremlin stole your Laser Cannon\n");
	}*/
	/*else if (best == #IT_PROXIMITY_GUN)
	{
		amount = victim.ammo_rockets;
		if (amount > 5)
			amount = 5;
		victim.ammo_rockets = victim.ammo_rockets - amount;
		self.ammo_rockets = self.ammo_rockets + amount;
		self.items = self.items | #IT_ROCKETS;
		self.currentammo = self.ammo_rockets;
		sprint (victim, "Gremlin stole your Proximity Gun\n");
	}*/
	tempself = self;
	self = victim;
	self.weapon = W_BestWeapon ();
	W_SetCurrentAmmo ();
	self = tempself;

	// tag the gremlin as having stolen a weapon
	self.has_fieldgen = 1;
	self.attack_finished = time;
	// don't fire the first shot at the person we stole the weapon from
	// all the time
	if (random()>0.65)
		self.martyr_enemy = victim;
	else
		self.martyr_enemy = self;
//	self.attack_state = AS_STRAIGHT;
	// find a recipient
	victim = GremlinFindVictim();
	if (victim != world)
	{
		self.enemy = victim;
		FoundTarget();
		self.attack_finished = time;
		self.search_time = time + 1.0;
	}

	return 1;
};
//============================================================================

/*
===========
GremlinFindTarget

gremlin is currently not attacking anything, so try to find a target

============
*/
float() GremlinFindTarget =
{
	local entity	head;
	local entity	gorge;
	local float		dist, visible_distance;
	local float		result;

	if ((self.has_fieldgen==0) && time > self.wait)
	{
		self.wait = time + 1.0;
		dist = 2000;
		gorge = world;
		head = nextent(world);
		while (head!=world)
		{
			if ((head.health < 1) && (head.flags & (32|8)))
			{
				result = fabs(head.origin_z - self.origin_z);
				visible_distance = vlen(self.origin - head.origin);
				if ((visible(head)) && (result<80) && (head.has_camera == 0) && (visible_distance<dist))
				{
					dist = visible_distance;
					gorge = head;
				}
			}
			head = nextent(head);
		}
		if ((gorge != world) && (dist < (700*random())))
		{
//			dprint("starting to gorge on ");
//			dprint(gorge.classname);
//			dprint("\n");
			self.oldenemy = self.enemy;
			self.has_camera = 1;
			self.enemy = gorge;
			self.search_time = time + 4.0;
			FoundTarget();
			return 1;
		}
	}
	else if (self.has_fieldgen)
	{
		head = GremlinFindVictim();
		if (head != world)
		{
			self.enemy = head;
			FoundTarget();
			self.attack_finished = time;
			self.search_time = time + 2.0;
			return 1;
		}
	}
	result = FindTarget();
	self.search_time = time + 2.0;
	return result;
};
//============================================================================
/*
=============
gremlin_walk

The monster is walking it's beat
=============
*/
void(float dist) gremlin_walk =
{
	movedist = dist;

	// check for noticing a player
	if (GremlinFindTarget ())
		return;

	movetogoal (dist);
};

//============================================================================

/*
=============
gremlin_stand

The monster is staying in one place for a while, with slight angle turns
=============
*/
void() gremlin_stand =
{
	if (FindTarget ())
		return;

	if (time > self.pausetime)
	{
		self.th_walk ();
		return;
	}
};

//============================================================================
float() GremlinCheckNoAmmo;
void() gremlin_glook1;
/*
=============
gremlin_run

The monster has an enemy it is trying to kill
=============
*/
void(float dist) gremlin_run =
{
//	local entity	oldtarget;
	local float		r;
	local vector	d;

	if (self.watertype == -5)
	{  // do damage
		T_Damage (self, world, world, 2000);
	}
	movedist = dist;
	if (self.has_fieldgen)
		self.frame = self.frame + $grun1 - $run1;

	if (self.has_camera)
	{
		traceline(self.origin, self.enemy.origin, 1, self);
		if (trace_fraction != 1.0)
		{
			self.has_camera = 0;
			return;
		}
		if (!visible(self.enemy))
		{
			self.has_camera = 0;
			return;
		}
		r = vlen(self.enemy.origin - self.origin);
		if (r < 130)
		{
			ai_face();
			if (r < 45)
			{
				self.th_melee ();
				self.attack_state = 1;
				return;
			}
			else if (walkmove (self.angles_y, dist) == 0)
			{
				self.has_camera = 0;
				return;
			}
			return;
		}
		movetogoal (dist);	  // done in C code...
	}
	else
	{
		if (random()>0.97)
		{
			if (GremlinFindTarget())
				return;
		}
		// get away from player if we stole a weapon
		if (self.has_fieldgen)
		{
			if (self.enemy.health < 0 && self.enemy.classname == "player")
			{
				gremlin_glook1();
				return;
			}
			if (!GremlinCheckNoAmmo())
			{
				if (self.t_length==1)
				{
					remove(self.trigger_field);
					self.goalentity = self.enemy;
					self.t_length = 0;
				}
				return;
			}
			r = vlen(self.enemy.origin - self.origin);
			d = normalize(self.origin-self.enemy.origin);
			if (self.t_length == 0)
			{
				if (r<150)
				{
					self.trigger_field = spawn();
					setsize(self.trigger_field,'-1 -1 -1','1 1 1');
					self.t_length = 1;
				}
			}
			if (self.t_length==1)
			{
				if (r > 250)
				{
					remove(self.trigger_field);
					self.goalentity = self.enemy;
					self.t_length = 0;
//					self.attack_state = AS_SLIDING;
				}
				else
				{
					if (r < 160)
					{
						local vector ang;
						local float done;
						local vector end;
						local float c;

						ang = vectoangles(d);
						done = 0;
						c = 0;
						end = self.enemy.origin + v_forward * 350; //comperr
						while (done == 0)
						{
							makevectors(ang);
							if(c >= 1)
							end = self.enemy.origin + v_forward * 350;
							traceline(self.enemy.origin,end,0,self);
							if (trace_fraction == 1.0)
							{
								traceline(self.origin,end,0,self);
								if (trace_fraction == 1.0)
									done = 1;
							}
							ang_y = anglemod(ang_y + 36);
							c = c + 1;
							if (c == 10)
							{
								done = 1;
							}
						}
						setorigin(self.trigger_field,end);
					}
					self.goalentity = self.trigger_field;
					self.ideal_yaw = vectoyaw(normalize(self.goalentity.origin-self.origin));
					ChangeYaw ();
					movetogoal (dist);	   // done in C code...
					self.nextthink = time + 0.1;
					return;
				}
			}
		}
		ai_run(dist);
		self.nextthink = time + 0.1;
	}
};

//============================================================================

void()	 Gremlin_JumpTouch;
void()	 Gremlin_FlipTouch;
void(float side)  Gremlin_Melee;
void(float side)  Gremlin_Gorge;

void()	 gremlin_stand1  =[ $stand1, gremlin_stand2  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand2  =[ $stand2, gremlin_stand3  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand3  =[ $stand3, gremlin_stand4  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand4  =[ $stand4, gremlin_stand5  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand5  =[ $stand5, gremlin_stand6  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand6  =[ $stand6, gremlin_stand7  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand7  =[ $stand7, gremlin_stand8  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand8  =[ $stand8, gremlin_stand9  ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand9  =[ $stand9, gremlin_stand10 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand10 =[ $stand10,	gremlin_stand11 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand11 =[ $stand11,	gremlin_stand12 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand12 =[ $stand12,	gremlin_stand13 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand13 =[ $stand13,	gremlin_stand14 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand14 =[ $stand14,	gremlin_stand15 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand15 =[ $stand15,	gremlin_stand16 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand16 =[ $stand16,	gremlin_stand17 ] {gremlin_stand();self.nextthink = time + 0.2;};
void()	 gremlin_stand17 =[ $stand17,	gremlin_stand1	] {gremlin_stand();self.nextthink = time + 0.2;};

void()	 gremlin_walk1 =[ $walk1,	   gremlin_walk2 ] {
if (random() < 0.1)
	sound (self, 2, "grem/idle.wav", 1, 2);
gremlin_walk(8);};
void()	 gremlin_walk2 =[ $walk2,	   gremlin_walk3 ] {gremlin_walk(8);};
void()	 gremlin_walk3 =[ $walk3,	   gremlin_walk4 ] {gremlin_walk(8);};
void()	 gremlin_walk4 =[ $walk4,	   gremlin_walk5 ] {gremlin_walk(8);};
void()	 gremlin_walk5 =[ $walk5,	   gremlin_walk6 ] {gremlin_walk(8);};
void()	 gremlin_walk6 =[ $walk6,	   gremlin_walk7 ] {gremlin_walk(8);};
void()	 gremlin_walk7 =[ $walk7,	   gremlin_walk8 ] {gremlin_walk(8);};
void()	 gremlin_walk8 =[ $walk8,	   gremlin_walk9 ] {gremlin_walk(8);};
void()	 gremlin_walk9 =[ $walk9,	   gremlin_walk10 ] {gremlin_walk(8);};
void()	 gremlin_walk10 =[ $walk10, 	 gremlin_walk11 ] {gremlin_walk(8);};
void()	 gremlin_walk11 =[ $walk11, 	 gremlin_walk12 ] {gremlin_walk(8);};
void()	 gremlin_walk12 =[ $walk12, 	 gremlin_walk1 ] {gremlin_walk(8);};

void()	 gremlin_run1 =[ $run1, 	 gremlin_run2 ] {
if (random() < 0.1)
	sound (self, 2, "grem/idle.wav", 1, 2);
gremlin_run(0);};
void()	 gremlin_run2 =[ $run2, 	 gremlin_run3 ] {gremlin_run(12);}; // original 8
void()	 gremlin_run3 =[ $run3, 	 gremlin_run4 ] {gremlin_run(16);}; // original 12
void()	 gremlin_run4 =[ $run4, 	 gremlin_run5 ] {gremlin_run(20);}; // original 16
void()	 gremlin_run5 =[ $run5, 	 gremlin_run6 ] {gremlin_run(20);}; // original 16
void()	 gremlin_run6 =[ $run6, 	 gremlin_run7 ] {gremlin_run(16);}; // original 12
void()	 gremlin_run7 =[ $run7, 	 gremlin_run8 ] {gremlin_run(12);}; // original 8
void()	 gremlin_run8 =[ $run8, 	 gremlin_run9 ] {gremlin_run(0);}; // original 0
void()	 gremlin_run9 =[ $run9, 	 gremlin_run10 ] {gremlin_run(12);}; // original 8
void()	 gremlin_run10 =[ $run10,	   gremlin_run11 ] {gremlin_run(16);}; // original 12
void()	 gremlin_run11 =[ $run11,	   gremlin_run12 ] {gremlin_run(20);}; // original 16
void()	 gremlin_run12 =[ $run12,	   gremlin_run13 ] {gremlin_run(20);}; // original 16
void()	 gremlin_run13 =[ $run13,	   gremlin_run14 ] {gremlin_run(16);}; // original 12
void()	 gremlin_run14 =[ $run14,	   gremlin_run15 ] {gremlin_run(12);}; // original 8
void()	 gremlin_run15 =[ $run15,	   gremlin_run1 ] {gremlin_run(0);}; // original 0

void()	 gremlin_jump1	 =[ $jump1, 	gremlin_jump2	] {ai_face();};
void()	 gremlin_jump2	 =[ $jump2, 	gremlin_jump3	] {ai_face();};
void()	 gremlin_jump3	 =[ $jump3, 	gremlin_jump4	] {ai_face();};
void()	 gremlin_jump4	 =[ $jump4, 	gremlin_jump5	] {ai_face();};
void()	 gremlin_jump5	 =[ $jump5, 	gremlin_jump6	]
{
	ai_face();

   if (self.flags & 512)
	  {
	  self.touch = Gremlin_JumpTouch;
	  makevectors (self.angles);
	  self.origin_z = self.origin_z + 1;
	  self.velocity = v_forward * 300 + '0 0 300';
	  self.flags = self.flags - 512;
	  }
   else
	  {
	  gremlin_run1();
	  }
};
void()	 gremlin_jump6	 =[ $jump6, 	gremlin_jump7	] {};
void()	 gremlin_jump7	 =[ $jump7, 	gremlin_jump8	] {};
void()	 gremlin_jump8	 =[ $jump8, 	gremlin_jump9	] {};
void()	 gremlin_jump9	 =[ $jump9, 	gremlin_jump10	 ] {};
void()	 gremlin_jump10   =[ $jump10,	  gremlin_jump11   ] {};
void()	 gremlin_jump11   =[ $jump11,	  gremlin_jump1   ]
   {
   self.nextthink = time + 3;
   // if three seconds pass, assume gremlin is stuck and jump again
   };

void()	 gremlin_jump12   =[ $jump12,	 gremlin_jump13  ] {};
void()	 gremlin_jump13   =[ $jump13,	 gremlin_jump14  ] {};
void()	 gremlin_jump14   =[ $jump14,	 gremlin_jump15  ] {};
void()	 gremlin_jump15   =[ $jump15,	 gremlin_jump16  ] {};
void()	 gremlin_jump16   =[ $jump16,	 gremlin_run1 ] {};

void()	 gremlin_shot1 = [$gfire1, gremlin_shot2   ] {//self.effects = self.effects | #EF_MUZZLEFLASH;
MuzzleFlash(self);
};
void()	 gremlin_shot2 = [$gfire2, gremlin_shot3   ] {};
void()	 gremlin_shot3 = [$gfire3, gremlin_shot4   ] {};
void()	 gremlin_shot4 = [$gfire4, gremlin_shot5   ] {};
void()	 gremlin_shot5 = [$gfire5, gremlin_shot6   ] {};
void()	 gremlin_shot6 = [$gfire6, gremlin_run1   ] {};


//============================================================================
void(float ox) Gremlin_FireNailGun;

void() gremlin_nail1   =[$gfire1, gremlin_nail2  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireNailGun(4);
   };
void() gremlin_nail2   =[$gfire1, gremlin_nail3  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireNailGun(4);
   };
void() gremlin_nail3   =[$gfire1, gremlin_nail4  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireNailGun(4);
   };
void() gremlin_nail4   =[$gfire1, gremlin_nail5  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireNailGun(4);
   };
void() gremlin_nail5   =[$gfire1, gremlin_nail6  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireNailGun(4);
   };
void() gremlin_nail6   =[$gfire1, gremlin_nail7  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireNailGun(4);
   };
void() gremlin_nail7 = [$gfire1, gremlin_run1	] {};


void(float ox) Gremlin_FireLaserGun;

void() gremlin_laser1	=[$gfire1, gremlin_laser2  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireLaserGun(4);
   };
void() gremlin_laser2	=[$gfire1, gremlin_laser3  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireLaserGun(4);
   };
void() gremlin_laser3	=[$gfire1, gremlin_laser4  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireLaserGun(4);
   };
void() gremlin_laser4	=[$gfire1, gremlin_laser5  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireLaserGun(4);
   };
void() gremlin_laser5	=[$gfire1, gremlin_laser6  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireLaserGun(4);
   };
void() gremlin_laser6	=[$gfire1, gremlin_laser7  ]
   {
	//self.effects = self.effects | #EF_MUZZLEFLASH;
	MuzzleFlash(self);
   Gremlin_FireLaserGun(4);
   };
void() gremlin_laser7 = [$gfire1, gremlin_run1	 ] {};

//============================================================================

void() Gremlin_FireLightningGun;
void() gremlin_light1	=[$gfire1, gremlin_light2  ]
   {
   Gremlin_FireLightningGun();
   };
void() gremlin_light2 = [$gfire1, gremlin_light3   ]
   {
   Gremlin_FireLightningGun();
   };
void() gremlin_light3	=[$gfire1, gremlin_light4  ]
   {
   Gremlin_FireLightningGun();
   };
void() gremlin_light4 = [$gfire1, gremlin_light5   ]
{
   Gremlin_FireLightningGun();
};
void() gremlin_light5 = [$gfire1, gremlin_run1	 ] {};

//============================================================================

void()	 gremlin_rocket1 = [$gfire1, gremlin_rocket2   ] {//self.effects = self.effects | #EF_MUZZLEFLASH;
MuzzleFlash(self);
};
void()	 gremlin_rocket2 = [$gfire2, gremlin_rocket3   ] {};
void()	 gremlin_rocket3 = [$gfire3, gremlin_rocket4   ] {};
void()	 gremlin_rocket4 = [$gfire4, gremlin_rocket5   ] {};
void()	 gremlin_rocket5 = [$gfire5, gremlin_rocket6   ] {};
void()	 gremlin_rocket6 = [$gfire6, gremlin_run1	] {};

void()	 gremlin_lunge1   =[ $lunge1,	  gremlin_lunge2   ] {ai_charge(0);};
void()	 gremlin_lunge2   =[ $lunge2,	  gremlin_lunge3   ] {ai_charge(0);};
void()	 gremlin_lunge3   =[ $lunge3,	  gremlin_lunge4   ] {ai_charge(0);};
void()	 gremlin_lunge4   =[ $lunge4,	  gremlin_lunge5   ] {ai_charge(0);};
void()	 gremlin_lunge5   =[ $lunge5,	  gremlin_lunge6   ] {ai_charge(0);};
void()	 gremlin_lunge6   =[ $lunge6,	  gremlin_lunge7   ] {ai_charge(0);};
void()	 gremlin_lunge7   =[ $lunge7,	  gremlin_lunge8   ] {ai_charge(15);};
void()	 gremlin_lunge8   =[ $lunge8,	  gremlin_lunge9   ] {ai_charge(0);Gremlin_Melee(0);};
void()	 gremlin_lunge9   =[ $lunge9,	  gremlin_lunge10] {ai_charge(0);};
void()	 gremlin_lunge10  =[ $lunge10,	  gremlin_lunge11] {ai_charge(0);};
void()	 gremlin_lunge11  =[ $lunge11,	  gremlin_run1] {ai_charge(0);};

void()	 gremlin_claw1	 =[ $attk1, 	gremlin_claw2	] {ai_charge(0);};
void()	 gremlin_claw2	 =[ $attk2, 	gremlin_claw3	] {ai_charge(0);};
void()	 gremlin_claw3	 =[ $attk3, 	gremlin_claw4	] {ai_charge(0);};
void()	 gremlin_claw4	 =[ $attk4, 	gremlin_claw5	] {ai_charge(0);};
void()	 gremlin_claw5	 =[ $attk5, 	gremlin_claw6	] {ai_charge(0);};
void()	 gremlin_claw6	 =[ $attk6, 	gremlin_claw7	] {ai_charge(0);Gremlin_Melee(200);};
void()	 gremlin_claw7	 =[ $attk7, 	gremlin_claw8	] {ai_charge(15);};
void()	 gremlin_claw8	 =[ $attk8, 	gremlin_claw9	] {ai_charge(0);};
void()	 gremlin_claw9	 =[ $attk9, 	gremlin_claw10] {ai_charge(0);};
void()	 gremlin_claw10  =[ $attk10,	gremlin_claw11] {ai_charge(0);};
void()	 gremlin_claw11  =[ $attk11,	gremlin_run1] {ai_charge(0);};

void()	 gremlin_gorge1   =[ $maul1,	 gremlin_gorge2] {ai_charge(1);};
void()	 gremlin_gorge2   =[ $maul2,	 gremlin_gorge3] {ai_charge(1);};
void()	 gremlin_gorge3   =[ $maul3,	 gremlin_gorge4] {ai_charge(2);};
void()	 gremlin_gorge4   =[ $maul4,	 gremlin_gorge5] {ai_charge(0);};
void()	 gremlin_gorge5   =[ $maul5,	 gremlin_gorge6] {ai_charge(0);};
void()	 gremlin_gorge6   =[ $maul6,	 gremlin_gorge7] {ai_charge(0);Gremlin_Gorge(200);};
void()	 gremlin_gorge7   =[ $maul7,	 gremlin_gorge8] {ai_charge(0);};
void()	 gremlin_gorge8   =[ $maul8,	 gremlin_gorge9] {ai_charge(0);Gremlin_Gorge(-200);};
void()	 gremlin_gorge9   =[ $maul9,	 gremlin_gorge10] {ai_charge(0);};
void()	 gremlin_gorge10   =[ $maul10,	   gremlin_gorge11] {ai_charge(0);};
void()	 gremlin_gorge11   =[ $maul11,	   gremlin_gorge12] {ai_charge(0);};
void()	 gremlin_gorge12   =[ $maul12,	   gremlin_gorge13] {ai_charge(0);};
void()	 gremlin_gorge13   =[ $maul13,	   gremlin_gorge1] {ai_charge(0);};

void()	 gremlin_look1	 =[ $look1, 	gremlin_look2] {self.nextthink = time + 0.2;};
void()	 gremlin_look2	 =[ $look2, 	gremlin_look3] {self.nextthink = time + 0.2;};
void()	 gremlin_look3	 =[ $look3, 	gremlin_look4] {self.nextthink = time + 0.2;};
void()	 gremlin_look4	 =[ $look4, 	gremlin_look5] {self.nextthink = time + 0.2;};
void()	 gremlin_look5	 =[ $look5, 	gremlin_look6] {self.nextthink = time + 0.2;};
void()	 gremlin_look6	 =[ $look6, 	gremlin_look7] {self.nextthink = time + 0.2;};
void()	 gremlin_look7	 =[ $look7, 	gremlin_look8] {self.nextthink = time + 0.2;};
void()	 gremlin_look8	 =[ $look8, 	gremlin_look9] {self.nextthink = time + 0.2;};
void()	 gremlin_look9	 =[ $look9, 	gremlin_run1]
   {
   //if (self.oldenemy.health > 0)
   if (StillValidEnemy(self.oldenemy))
	  {
	  self.enemy = self.oldenemy;
	  HuntTarget ();
	  }
   else
	  {
		MonsterIdle(self);
	  /*if (self.movetarget)
		 self.th_walk ();
	  else
		 self.th_stand ();*/
	  }
   };


void() GremlinDropBackpack;
void()	 gremlin_glook1   =[ $glook1,	  gremlin_glook2] {};
void()	 gremlin_glook2   =[ $glook2,	  gremlin_glook3] {};
void()	 gremlin_glook3   =[ $glook3,	  gremlin_glook4] {};
void()	 gremlin_glook4   =[ $glook4,	  gremlin_glook5] {};
void()	 gremlin_glook5   =[ $glook5,	  gremlin_glook6] {};
void()	 gremlin_glook6   =[ $glook6,	  gremlin_glook7] {};
void()	 gremlin_glook7   =[ $glook7,	  gremlin_glook8] {};
void()	 gremlin_glook8   =[ $glook8,	  gremlin_glook9] {};
void()	 gremlin_glook9   =[ $glook9,	  gremlin_glook10] {};
void()	 gremlin_glook10   =[ $glook10, 	gremlin_glook11] {};
void()	 gremlin_glook11   =[ $glook11, 	gremlin_glook12] {};
void()	 gremlin_glook12   =[ $glook12, 	gremlin_glook13] {};
void()	 gremlin_glook13   =[ $glook13, 	gremlin_glook14] {};
void()	 gremlin_glook14   =[ $glook14, 	gremlin_glook15] {};
void()	 gremlin_glook15   =[ $glook15, 	gremlin_glook16] {};
void()	 gremlin_glook16   =[ $glook16, 	gremlin_glook17] {};
void()	 gremlin_glook17   =[ $glook17, 	gremlin_glook18] {};
void()	 gremlin_glook18   =[ $glook18, 	gremlin_glook19] {};
void()	 gremlin_glook19   =[ $glook19, 	gremlin_glook20] {};
void()	 gremlin_glook20   =[ $glook20, 	gremlin_glook20]
   {
   //GremlinDropBackpack();
   //self.has_fieldgen = #FALSE;
   
   //if (self.oldenemy.health > 0)
   if (StillValidEnemy(self.oldenemy))
	  {
	  self.enemy = self.oldenemy;
	  HuntTarget ();
	  }
   else
	  {
		MonsterIdle(self);
	  /*if (self.movetarget)
		 self.th_walk ();
	  else
		 self.th_stand ();*/
	  }
   };

void()	 gremlin_pain1	 =[ $pain1, 	gremlin_pain2	] {ai_back(4);};
void()	 gremlin_pain2	 =[ $pain2, 	gremlin_pain3	] {ai_back(4);};
void()	 gremlin_pain3	 =[ $pain3, 	gremlin_pain4	] {ai_back(2);};
void()	 gremlin_pain4	 =[ $pain4, 	gremlin_run1 ] {};

void()	 gremlin_gunpain1	=[ $gpain1, 	gremlin_gunpain2   ] {ai_back(4);};
void()	 gremlin_gunpain2	=[ $gpain2, 	gremlin_gunpain3   ] {ai_back(2);};
void()	 gremlin_gunpain3	=[ $gpain3, 	gremlin_run1 ] {};

void(entity attacker, float damage) gremlin_pain =
{
   if (self.health <= 0)
		return; 	// allready dying, don't go into pain frame

   local float r;

   /*if (random()<0.8)
	  {
	  self.has_camera = #FALSE;
	  self.enemy = attacker;
	  FoundTarget();
	  }*/ 
   if (self.touch == Gremlin_JumpTouch)
		return;

	if (self.pain_finished > time)
		return;
	
	AI_CheckAttacker(attacker);

	self.pain_finished = time + 1;
//	 if (random()<0.5)
//		sound (self, CHAN_VOICE, "grem/pain2.wav", 1, ATTN_NORM);
//	 else
   r = random();
   if (r<0.33)
	  sound (self, 2, "grem/pain1.wav", 1, 1);
   else if (r<0.66)
	  sound (self, 2, "grem/pain2.wav", 1, 1);
   else
	  sound (self, 2, "grem/pain3.wav", 1, 1);

   if (self.has_fieldgen)
	  {
	  gremlin_gunpain1 ();
	  }
   else
	  {
	  gremlin_pain1 ();
	  }
};

void()	 gremlin_spawn1 =[ $spawn1, 	 gremlin_spawn2 ] {self.nextthink = time + 0.3;
   self.th_pain = SUB_PainNull;
//	  sound (self, CHAN_VOICE, "grem/idle.wav", 1, ATTN_IDLE);
};
void()	 gremlin_spawn2 =[ $spawn2, 	 gremlin_spawn3 ] {self.nextthink = time + 0.3;};
void()	 gremlin_spawn3 =[ $spawn3, 	 gremlin_spawn4 ] {self.nextthink = time + 0.3;};
void()	 gremlin_spawn4 =[ $spawn4, 	 gremlin_spawn5 ] {self.nextthink = time + 0.3;};
void()	 gremlin_spawn5 =[ $spawn5, 	 gremlin_spawn6 ] {self.nextthink = time + 0.3;};
void()	 gremlin_spawn6 =[ $spawn6, 	 gremlin_run1 ] {
   self.th_pain = gremlin_pain;
};


void()	 gremlin_die1	 =[ $death1,	gremlin_die2 ] {
sound (self, 2, "grem/death.wav", 1, 0);};
void()	 gremlin_die2	 =[ $death2,	gremlin_die3 ] {ai_forward(2);};
void()	 gremlin_die3	 =[ $death3,	gremlin_die4 ] {ai_forward(1);};
void()	 gremlin_die4	 =[ $death4,	gremlin_die5 ] {ai_forward(2);};
void()	 gremlin_die5	 =[ $death5,	gremlin_die6 ] {ai_forward(1);};
void()	 gremlin_die6	 =[ $death6,	gremlin_die7 ]
{self.solid = 0;};
void()	 gremlin_die7	 =[ $death7,	gremlin_die8 ] {ai_forward(2);};
void()	 gremlin_die8	 =[ $death8,	gremlin_die9 ] {ai_forward(1);};
void()	 gremlin_die9	 =[ $death9,	gremlin_die10 ] {ai_forward(2);};
void()	 gremlin_die10	  =[ $death10,	  gremlin_die11 ] {ai_forward(1);};
void()	 gremlin_die11	  =[ $death11,	  gremlin_die12 ] {ai_forward(2);};
void()	 gremlin_die12	  =[ $death12,	  gremlin_die12 ] {
	//self.nextthink = time + 40 + 40*random(); 
	//self.think = SUB_Remove;
	MonsterCorpse();	
};

void() gremlin_gib=
   {
   sound (self, 2, "player/udeath.wav", 1, 1);
   //ThrowHead ("progs/h_grem.mdl", -35);
   ThrowMonsterHead("progs/h_grem.mdl", -35);
   ThrowGib ("progs/gib1.mdl", -35,1,0,1, 0);
   ThrowGib ("progs/gib1.mdl", -35,1,0,1, 0);
   ThrowGib ("progs/gib1.mdl", -35,1,0,1, 0);
   SpawnBloodEx(self.origin,0.66,9);
   dremove(self);
   };

void()	 gremlin_flip1	  =[ $flip1,	gremlin_flip2 ]
   {
   ai_face();
	makevectors (self.angles);
   self.origin_z = self.origin_z + 1;
   self.velocity = '0 0 350' - (v_forward * 200);
	if (self.flags & 512)
		self.flags = self.flags - 512;
   sound (self, 2, "grem/death.wav", 1, 1);
   };
void()	 gremlin_flip2	  =[ $flip2,	gremlin_flip3 ] {ai_face();};
void()	 gremlin_flip3	  =[ $flip3,	gremlin_flip4 ] {};
void()	 gremlin_flip4	  =[ $flip4,	gremlin_flip5 ] {};
void()	 gremlin_flip5	  =[ $flip5,	gremlin_flip6 ] {};
void()	 gremlin_flip6	  =[ $flip6,	gremlin_flip7 ] {self.touch = Gremlin_FlipTouch;};
void()	 gremlin_flip7	  =[ $flip7,	gremlin_gib ]
   {
   self.nextthink = time + 3;
   // if three seconds pass, assume gremlin is stuck and gib him
   };
void()	 gremlin_flip8	  =[ $flip8,	gremlin_flip8 ]
   {
   self.solid = 0;
   if (self.health <= 0) // dead?
   {
		//self.nextthink = time + 40 + 40*random(); 
		//self.think = SUB_Remove;
		MonsterCorpse();
   }	
   };

/*
===============
GremlinDropBackpack
===============
*/
void() GremlinDropBackpack =
{
	local entity	item;

	item = spawn();
	item.origin = self.origin - '0 0 24';

   self.items = self.items - ( self.items & (256 | 512 | 1024 | 2048 ) );
   item.items = self.items;

   if (item.items & 4096)
		item.netname = "Axe";
   else if (item.items & 1)
		item.netname = "Shotgun";
   else if (item.items & 2)
		item.netname = "Double-barrelled Shotgun";
   else if (item.items & 4)
		item.netname = "Nailgun";
   else if (item.items & 8)
		item.netname = "Super Nailgun";
   else if (item.items & 16)
		item.netname = "Grenade Launcher";
   else if (item.items & 32)
		item.netname = "Rocket Launcher";
   else if (item.items & 64)
		item.netname = "Thunderbolt";
   /*else if (item.items & #IT_LASER_CANNON)
	  item.netname = "Laser Cannon";
   else if (item.items & #IT_PROXIMITY_GUN)
	  item.netname = "Proximity Gun";
   else if (item.items & #IT_MJOLNIR)
	  item.netname = "Mjolnir";*/
   else
		item.netname = "";

   item.ammo_shells = self.ammo_shells;
	item.ammo_nails = self.ammo_nails;
	item.ammo_rockets = self.ammo_rockets;
	item.ammo_cells = self.ammo_cells;
   if (item.ammo_shells < 0) item.ammo_shells = 0;
   if (item.ammo_nails < 0) item.ammo_nails = 0;
   if (item.ammo_rockets < 0) item.ammo_rockets = 0;
   if (item.ammo_cells < 0) item.ammo_cells = 0;

	item.velocity_z = 300;
	item.velocity_x = -100 + (random() * 200);
	item.velocity_y = -100 + (random() * 200);

	item.flags = 256;
	item.solid = 1;
	item.movetype = 6;
	setmodel (item, "progs/backpack.mdl");
	setsize (item, '-16 -16 0', '16 16 56');
	item.touch = BackpackTouch;

	item.nextthink = time + 120;	// remove after 2 minutes
	item.think = SUB_Remove;
};

void() gremlin_die =
{
   self.effects=0;
	
	if (self.real_owner.classname == "player")
	{
		sprint(self.real_owner,2,"Your gremlin ");
		sprint(self.real_owner,2,self.netname);		
		sprint(self.real_owner,2," is dead.\n");
		self.real_owner.job_finished = time + 5; //Can't summon streams of demons SB can so
		ResetSlotPointer(self.real_owner, self.increase_team1);
	}
   
   local vector   vec;
	local float 	dot;

// check for gib OfN - Removed #|#IT_LASER_CANNON|#IT_PROXIMITY_GUN
   if (self.items & (8 | 2|4|16|32|64))
	  {
	  GremlinDropBackpack();
	  self.has_fieldgen = 0;
	  }

   makevectors (self.angles);
   vec = normalize (damage_attacker.origin - self.origin);
	dot = vec * v_forward;

   if (self.health < -40)
	  {
		sound (self, 2, "player/udeath.wav", 1, 0);
	  ThrowMonsterHead ("progs/h_grem.mdl", self.health);
		ThrowGib ("progs/gib1.mdl", self.health,1,0,1, 0);
		ThrowGib ("progs/gib2.mdl", self.health,1,0,3, 0);
		ThrowGib ("progs/gib3.mdl", self.health,1,0,2, 0);
		SpawnBloodEx(self.origin,0.66,9);
		dremove(self);
		return;
	  }
   
   // Spawn bubbles if under water/slime
	local float contres;
	contres = pointcontents(self.origin);
	if (contres == -3 || contres == -4)
		DeathBubbles(5);

   if (dot>0.7 && (random()<0.5) && (self.flags & 512))
	  {
	  //self.classname = "monster_corpse";
	  MonsterDead();
	  gremlin_flip1();
	  return;
	  }
// regular death
   //self.classname = "monster_corpse";   
   MonsterDead();
   gremlin_die1 ();
};


float() GremlinWeaponAttack;
void() Gremlin_MeleeAttack =
   {
   local float num;
   if (self.has_camera)
	  {
	  gremlin_gorge1();
	  }
   else
	  {
	  if (self.has_fieldgen == 1)
		 {
		 objerror("gremlin meleeing with stolen weapon");
		 }
	  else if ((self.enemy.flags & 8) && random() < 0.4)
		 {
		 if (GremlinAttemptWeaponSteal())
			return;
		 }
	  num = random();
	  if (num<0.3)
		 {
		 gremlin_claw1 ();
		 }
	  else if (num < 0.6)
		 {
		 gremlin_lunge1 ();
		 }
	  else
		 {
		 gremlin_claw1 ();
		 }
	  }
   };

/*
============
gremlin_recoil
============
*/
/*
void() gremlin_recoil =
   {
   self.nextthink = time + 0.1;
   self.flags = self.flags - FL_ONGROUND;
   if (vlen(self.velocity)<2)
	  {
	  self.movetype = self.spawnsolidtype;
	  self.think = self.spawnthink;
	  }
   };
*/
/*
============
GremlinRecoil
============
*/
/*
void(vector dir, float mag) GremlinRecoil =
   {
   self.spawnsolidtype = self.movetype;
   self.movetype = MOVETYPE_BOUNCE;
   self.spawnthink = self.think;
   self.think = gremlin_recoil;
   self.nextthink = time;
   self.velocity = mag * dir;
   self.velocity_z = self.velocity_z + 100;
   self.flags = self.flags - FL_ONGROUND;
   };
*/

/*
============
GremlinCheckNoAmmo

attack with a weapon
============
*/
float() GremlinCheckNoAmmo =
   {
	if (self.currentammo > 0)
		return 1;
   else
	  {
	  self.has_fieldgen = 0;
	  return 0;
	  }
   };

/*
============
GremlinFindVictim

find a victim to shoot at
============
*/
entity() GremlinFindVictim =
   {
   local entity head;
   local entity selected;
   local float dist;
   local float head_dist;
//	 local float decision;

   self.search_time = time + 1.0;
// look in our immediate vicinity

   selected = world;
   dist = 1000;
   head = findradius(self.origin, 1000);
   while(head)
	  {
	  if(!(head.flags & 128) && ((head.flags & 32) || (head.flags & 8)))
		 {
		 if (visible(head) && (head.health > 0) && (head !=self))
			{
			head_dist = vlen(head.origin-self.origin);
			if (head == self.martyr_enemy)
			   head_dist = head_dist * 2;
			if (head.flags & 8)
			   head_dist = head_dist / 1.5;
			if (head.classname == self.classname)
			   head_dist = head_dist * 1.5;
			if (head_dist < dist)
			   {
			   selected = head;
			   dist = head_dist;
			   }
			}
		 }
	  head = head.chain;
	  }
   self.martyr_enemy = selected;

   return selected;
   };

/*
============
Gremlin_FireRocket

fire a rocket
============
*/
void() Gremlin_FireRocket =
{
	local	entity missile;//, mpuff;
   local vector dir;

	self.currentammo = self.ammo_rockets = self.ammo_rockets - 1;
   //self.effects = self.effects | #EF_MUZZLEFLASH;
   MuzzleFlash(self);

	sound (self, 1, "weapons/sgun1.wav", 1, 1);

	//self.punchangle_x = -2;

	missile = spawn ();
	missile.owner = self;
	missile.movetype = 9;
	missile.solid = 2;
	missile.classname = "rocket"; // was "missile"

// set missile speed

   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.1 * v_right + crandom()* 0.1 *v_up;
   missile.velocity = normalize(dir);
   missile.velocity = missile.velocity * 1000;
	missile.angles = vectoangles(missile.velocity);

	missile.touch = T_MissileTouch;

// set missile duration
	missile.nextthink = time + 5;
	missile.think = SUB_Remove;

	setmodel (missile, "progs/missile.mdl");
	setsize (missile, '0 0 0', '0 0 0');
	setorigin (missile, self.origin + v_forward*8 + '0 0 16');
//	 GremlinRecoil(dir,-1000);
};

/*
============
Gremlin_FireNailGun

fire a nailgun
============
*/
void(float ox) Gremlin_FireNailGun =
{
   local vector dir;

   self.currentammo = self.ammo_nails = self.ammo_nails - 1;
   //self.effects = self.effects | #EF_MUZZLEFLASH;
   MuzzleFlash(self);

   sound (self, 1, "weapons/rocket1i.wav", 1, 1);
   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.1 * v_right + crandom()* 0.1 *v_up;
   dir = normalize(dir);
   launch_spike (self.origin + '0 0 16', dir);
};

/*
============
Gremlin_FireLaserGun

fire a laser cannon
============
*/
void(float ox) Gremlin_FireLaserGun =
{
   local vector dir;

   self.currentammo = self.ammo_cells = self.ammo_cells - 1;
   //self.effects = self.effects | #EF_MUZZLEFLASH;
   MuzzleFlash(self);

   sound (self, 1, "weapons/rocket1i.wav", 1, 1);
   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.1 * v_right + crandom()* 0.1 *v_up;
   dir = normalize(dir);
   HIP_LaunchLaser(self.origin + '0 0 16', dir, 0);
};

/*
============
Gremlin_FireShotGun

fire a shotgun
============
*/
void() Gremlin_FireShotGun =
{
   local vector dir;

   self.currentammo = self.ammo_shells = self.ammo_shells - 1;
   //self.effects = self.effects | #EF_MUZZLEFLASH;
   MuzzleFlash(self);

   sound (self, 1, "weapons/guncock.wav", 1, 1);
   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.1 *v_right + crandom()* 0.1 *v_up;
   dir = normalize(dir);
   self.v_angle = vectoangles(dir);
   FireBullets (6, dir, '0.04 0.04 0',1024);
};

/*
============
Gremlin_FireSuperShotGun

fire a shotgun
============
*/
void() Gremlin_FireSuperShotGun =
{
   local vector dir;

   self.currentammo = self.ammo_shells = self.ammo_shells - 2;
   //self.effects = self.effects | #EF_MUZZLEFLASH;
   MuzzleFlash(self);

   sound (self ,1, "weapons/shotgn2.wav", 1, 1);
   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.3 *v_right + crandom()* 0.3 *v_up;
   dir = normalize(dir);
   self.v_angle = vectoangles(dir);
   FireBullets (14, dir, '0.14 0.08 0',1024);
};

/*
============
Gremlin_FireLightningGun

fire lightning gun
============
*/
void() Gremlin_FireLightningGun =
   {
	local	vector	org, dir;
   local float cells;

// explode if under water
   if (self.watertype <= -3)
	{
		cells = self.ammo_cells;
		self.ammo_cells = 0;
	  //discharged = 1;
		T_RadiusDamage (self, self, 35*cells, world);
	  //discharged = 0;
//		W_SetCurrentAmmo ();
		return;
	}

   //self.effects = self.effects | #EF_MUZZLEFLASH;
   MuzzleFlash(self);

	ai_face ();

   self.currentammo = self.ammo_cells = self.ammo_cells - 2;
   org = self.origin + '0 0 16';

	dir = self.enemy.origin + '0 0 16' - org;
	dir = normalize (dir);
   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.1 *v_right + crandom()* 0.1 *v_up;
   dir = normalize(dir);

	traceline (org, self.origin + dir*600, 1, self);

   WriteByte (4, 23);
   WriteByte (4, 6);
	WriteEntity (4, self);
	WriteCoord (4, org_x);
	WriteCoord (4, org_y);
	WriteCoord (4, org_z);
	WriteCoord (4, trace_endpos_x);
	WriteCoord (4, trace_endpos_y);
	WriteCoord (4, trace_endpos_z);

   
	multicast (org, 1);
   

   LightningDamage (org, trace_endpos+(dir*4), self, 30);
};

/*
================
GremlinFireProximityGrenade
================
*/
/*
void() GremlinFireProximityGrenade =
{
   local entity missile;
   local vector dir;

   NumProximityGrenades = NumProximityGrenades + 1;
   self.currentammo = self.ammo_rockets = self.ammo_rockets - 1;

	sound (self, #CHAN_WEAPON, "weapons/grenade.wav", 1, #ATTN_NORM);

	missile = spawn ();
   missile.owner = self;
   missile.martyr_enemy = self;
   missile.movetype = #MOVETYPE_TOSS;
	missile.solid = #SOLID_BBOX;
   missile.classname = "proximity_grenade";
   missile.takedamage = #DAMAGE_NO;
   missile.health = 5;
   missile.state = 0;

// set missile speed

   dir = normalize(self.enemy.origin - self.origin);
   self.v_angle = vectoangles(dir);
   makevectors(self.v_angle);
   dir = dir + crandom()* 0.1 *v_right + crandom()* 0.1 *v_up;
   dir = normalize(dir);
   missile.velocity = dir * 600;
	missile.velocity_z = 200;

   missile.avelocity = '100 600 100';

	missile.angles = vectoangles(missile.velocity);

   missile.touch = ProximityGrenadeTouch;

// set missile duration
   missile.nextthink = time + 2;
   missile.delay = time + 15 + (10*random());
   missile.think = ProximityBomb;
   missile.th_die = ProximityGrenadeExplode;

   setmodel (missile, "progs/proxbomb.mdl");
   setorigin (missile, self.origin);
   setsize (missile, '-1 -1 -1', '1 1 1');
};
*/
/*
============
GremlinWeaponAttack

attack with a weapon
============
*/
void()	 gremlin_shot1;
void()	 gremlin_nail1;
void()	 gremlin_light1;
void()	 gremlin_rocket1;

float() GremlinWeaponAttack =
   {
	/*local float	r;
   local entity targ;
   local vector vec;*/


   if (!GremlinCheckNoAmmo ())
	  return 0;

   self.show_hostile = time + 1; // wake monsters up

	MonsterAuraPower();

   if (self.weapon == 1)
	  {
	  gremlin_shot1 ();
	  Gremlin_FireShotGun();
	  Attack_Finished(1);
	  }
	else if (self.weapon == 2)
	  {
	  gremlin_shot1 ();
	  Gremlin_FireSuperShotGun();
	  Attack_Finished(1);
	  }
	else if (self.weapon == 4)
	  {
	  gremlin_nail3 ();
	  Attack_Finished(1);
	  }
	else if (self.weapon == 8)
	  {
	  gremlin_nail3 ();
	  Attack_Finished(1);
	  }
	/*else if (self.weapon == #IT_GRENADE_LAUNCHER)
	  {
	  gremlin_rocket1();
	  OgreFireGrenade();
	  self.currentammo = self.ammo_rockets = self.ammo_rockets - 1;
	  Attack_Finished(1);
	  }*/
	else if (self.weapon == 32)
	  {
	  gremlin_rocket1();
	  Gremlin_FireRocket();
	  Attack_Finished(1);
	  }
	else if (self.weapon == 64)
	  {
	  gremlin_light1();
	  Attack_Finished(1);
	  sound (self, 0, "weapons/lstart.wav", 1, 1);
	  }
   /*else if (self.weapon == IT_LASER_CANNON)
	  {
	  gremlin_laser3();
	  Attack_Finished(1);
	  }
   else if (self.weapon == IT_PROXIMITY_GUN)
	  {
	  gremlin_rocket1();
	  GremlinFireProximityGrenade();
	  Attack_Finished(1);
	  }*/
   return 1;
   };

void() Gremlin_MissileAttack =
   {
   if (self.has_fieldgen)
	  {
	  if (GremlinWeaponAttack())
		 return;
	  else if ((random()<0.1) && (self.flags & 512))
		 {
		 gremlin_jump1();
		 return;
		 }
	  }
   if (self.flags & 512)
	  gremlin_jump1();
   };

void() Gremlin_Precache =
{
	precache_model ("progs/grem.mdl");
	precache_model ("progs/h_grem.mdl");

	precache_sound ("grem/death.wav");
	precache_sound ("grem/attack.wav");
	precache_sound ("demon/djump.wav");
	precache_sound ("demon/dhit2.wav");
	precache_sound ("grem/pain1.wav");
	precache_sound ("grem/pain2.wav");
	precache_sound ("grem/pain3.wav");
	precache_sound ("grem/idle.wav");
	precache_sound ("grem/sight1.wav");
};

/*QUAKED monster_gremlin (1 0 0) (-32 -32 -24) (32 32 64) Ambush

*/

/*
void() monster_gremlin =
{
   if (deathmatch)
	{
		remove(self);
		return;
	}
   NumGremlins = NumGremlins + 1;
   precache_model ("progs/grem.mdl");
   precache_model ("progs/h_grem.mdl");

   precache_sound ("grem/death.wav");
   precache_sound ("grem/attack.wav");
   precache_sound ("demon/djump.wav");
   precache_sound ("demon/dhit2.wav");
   precache_sound ("grem/pain1.wav");
   precache_sound ("grem/pain2.wav");
   precache_sound ("grem/pain3.wav");
   precache_sound ("grem/idle.wav");
   precache_sound ("grem/sight1.wav");

   self.solid = #SOLID_SLIDEBOX;
	self.movetype = #MOVETYPE_STEP;

   setmodel (self, "progs/grem.mdl");

   setsize (self, #VEC_HULL_MIN, #VEC_HULL_MAX);
   self.health = 100;
   self.max_health = 101;
   self.yaw_speed = 40;

   self.th_stand = gremlin_stand1;
   self.th_walk = gremlin_walk1;
   self.th_run = gremlin_run1;
   self.th_die = gremlin_die;
   self.th_melee = Gremlin_MeleeAttack; 	// one of two attacks
   self.th_missile = Gremlin_MissileAttack; // check for random jump or firing of weapon
   self.th_pain = gremlin_pain;

	walkmonster_start();
};
*/

float()  GremlinCheckAttack =
   {
	local vector	spot1, spot2;
	local entity	targ;
	local float 	chance;

	targ = self.enemy;

   if (time < self.attack_finished)
	  return 0;

// see if any entities are in the way of the shot
   spot1 = self.origin;// + self.view_ofs;
   spot2 = targ.origin;// + targ.view_ofs;

   if ((vlen(spot2 - spot1) <= 90) && (self.has_fieldgen == 0))
	  {
	  self.attack_state = 3;
	  return 1;
	  }
// missile attack
   chance = 0.03 + self.has_fieldgen;
   if (random() < chance)
	  {
	  self.attack_state = 4;
	  return 1;
	  }
	return 0;
   };


//===========================================================================

void(float side)  Gremlin_Melee =
{
	local	float	ldmg;
	local vector	delta;

	ai_face ();

//	 walkmove (self.ideal_yaw, 12);   // allow a little closing


	delta = self.enemy.origin - self.origin;

	if (vlen(delta) > 100)
		return;
	if (!CanDamage (self.enemy, self))
		return;

	deathmsg = 0;

	sound (self, 1, "grem/attack.wav", 1, 1);
	ldmg = 40+40*random();//10 + 5*random();
	T_Damage (self.enemy, self, self, ldmg);

	makevectors (self.angles);
	SpawnMeatSpray (self.origin + v_forward*16, side * v_right);
};

//===========================================================================
void(float dm) Gremlin_ThrowHead =
   {
   local string gibname;
   /*if (self.classname == "monster_ogre")
	  gibname = "progs/h_ogre.mdl";
	else if (self.classname == "monster_knight")
	  gibname = "progs/h_knight.mdl";*/
   if (self.classname == "monster_shambler")
	  gibname = "progs/h_shams.mdl";
   else if (self.classname == "monster_demon1")
	  gibname = "progs/h_demon.mdl";
   else if (self.classname == "monster_wizard")
	  gibname = "progs/h_wizard.mdl";
   /*else if (self.classname == "monster_zombie")
	  gibname = "progs/h_zombie.mdl";
   else if (self.classname == "monster_dog")
	  gibname = "progs/h_dog.mdl";
   else if (self.classname == "monster_hell_knight")
	  gibname = "progs/h_hellkn.mdl";
   else if (self.classname == "monster_enforcer")
	  gibname = "progs/h_mega.mdl";*/
   else if (self.classname == "monster_army")
	  gibname = "progs/h_player.mdl";
   /*else if (self.classname == "monster_shalrath")
	  gibname = "progs/h_shal.mdl";*/
   else if (self.classname == "monster_gremlin")
	  gibname = "progs/h_grem.mdl";
   /*else if (self.classname == "monster_scourge")
	  gibname = "progs/h_scourg.mdl";*/
   else if (self.classname == "monster_fish")
	  gibname = "progs/gib1.mdl";
   else
	  gibname = "progs/h_player.mdl";
   ThrowMonsterHead(gibname,dm);
   };
//===========================================================================

/*
============
Gremlin_Damage

The damage is coming from inflictor, but get mad at attacker
============
*/
void(entity targ, entity inflictor, entity attacker, float damage) Gremlin_Damage=
{
// check for godmode or invincibility
	if (targ.flags & 64)
		return;
	if (targ.invincible_finished >= time)
	{
		if (self.invincible_sound < time)
		{
			sound (targ, 3, "items/protect3.wav", 1, 1);
			self.invincible_sound = time + 2;
		}
		return;
	}

// team play damage avoidance
	if ( (teamplay == 1) && (targ.team > 0)&&(targ.team == attacker.team) )
		return;

// do the damage
   targ.health = targ.health - damage;
   };

void() Gremlin_Split =
   {
   local entity grem;
   local entity temp;
   local entity head;
   local float done;
   local vector ang;
   local float c;
   local vector pos;
   local float proceed;

   if (NumSpawnGremlins >= (NumGremlins*2))
	  return;
   done = 0;
   c = 0;
   ang = self.angles;
   pos = self.origin + (80 * v_forward); //comperr
   
   while (done == 0)
	  {
	  makevectors(ang);
	if (c >= 1) //comperr
	  pos = self.origin + (80 * v_forward);
	  head = findradius(pos, 35);
	  proceed = 1;
	  while (head)
		 {
		 if ((head.health > 0) && (head.flags & (32 | 8)))
			proceed = 0;
		 head = head.chain;
		 }
	  traceline(self.origin,pos,0,self);
	  if (trace_fraction == 1 && (proceed == 1))
		 {
		 traceline(self.origin,(pos-'40 40 0'),0,self);
		 if (trace_fraction == 1)
			{
			traceline(self.origin,(pos+'40 40 0'),0,self);
			if (trace_fraction == 1)
			   {
			   traceline(self.origin,(pos + '0 0 64'),0,self);
			   if (trace_fraction == 1)
				  {
				  traceline(self.origin,(pos - '0 0 64'),0,self);
				  if (trace_fraction != 1)
					 {
					 done = 1;
					 }
				  }
			   }
			}
		 }
	  if (done == 0)
		 {
		 ang_y = ang_y + 36;
		 c = c + 1;
		 if (c==10)
			{
			return;
			}
		 }
	  }
   NumSpawnGremlins = NumSpawnGremlins + 1;
   grem = spawn();
   SUB_CopyEntity(self,grem);
   grem.solid = 3;
   grem.movetype = 4;
   setmodel (grem, "progs/grem.mdl");
   setsize (grem, '-16 -16 -24', '16 16 32');
   if (self.health < 100) self.health = 100;
   grem.health = self.health / 2;
   self.health = self.health / 2;
//	 grem.max_health = 101;
//	 grem.has_camera = FALSE;
   grem.has_fieldgen = 0;
   grem.items = 0;
   total_monsters = total_monsters + 1;
   /*WriteByte (#MSG_BROADCAST, SVC_UPDATESTAT);
   WriteByte (#MSG_BROADCAST, STAT_TOTALMONSTERS);
   WriteLong (#MSG_BROADCAST, total_monsters);*/
   setorigin(grem, pos);
   temp = self;
   self = grem;
   gremlin_spawn1();
   self.enemy = world;
   self.has_camera = 0;
   self = temp;
   };

void(float side)  Gremlin_Gorge =
   {
	local	float	ldmg;
	local vector	delta;
   local entity temp;

//	 ai_face ();
//	 walkmove (self.ideal_yaw, 6);	 // allow a little closing

	delta = self.enemy.origin - self.origin;
//	 self.enemy.takedamage = DAMAGE_YES;

	if (random() < 0.5)
		sound (self, 1, "demon/dhit2.wav", 1, 1);
	else
		sound (self, 1, "shambler/smack.wav", 1, 1);

//	  sound (self, CHAN_WEAPON, "grem/attack.wav", 1, ATTN_NORM);
   ldmg = 7+5*random();
   Gremlin_Damage (self.enemy, self, self, ldmg);

	makevectors (self.angles);
	SpawnMeatSpray (self.origin + v_forward*16, side * v_right);
   if (self.enemy.health < -200.0) // -200.0
	  {
	  if (self.enemy.has_camera==0)
		 {
		 self.enemy.has_camera = 1;
		 sound (self, 2, "player/udeath.wav", 1, 1);
		 temp = self;
		 self = self.enemy;
		 Gremlin_ThrowHead(-15);
//		   ThrowGib ("progs/gib1.mdl", -15);
//		   ThrowGib ("progs/gib2.mdl", -15);
//		   ThrowGib ("progs/gib3.mdl", -15);
		 self = temp;
		 ldmg = 150 + 100*random();
		 T_Heal(self,ldmg,0);
//		   if (self.health >= self.max_health)
			Gremlin_Split();
		 }
	  self.enemy = world;
	  self.has_camera = 0;
/*
	  if (self.has_fieldgen)
		 {
		 temp = GremlinFindVictim();
		 if (temp != world)
			{
			self.enemy = temp;
			FoundTarget();
			self.search_time = time + 1.0;
//			  return;
			}
		 }
*/
//		FindTarget();
/*
	  if (self.oldenemy.health > 0)
		 {
		 self.enemy = self.oldenemy;
		 HuntTarget ();
		 }
	  else
		 {
		 if (self.movetarget)
			self.th_walk ();
		 else
			self.th_stand ();
		 }
*/
	  gremlin_look1();
	  }
   };


void()	 Gremlin_JumpTouch =
{
//	local	float	ldmg;

   if (self.health <= 0)
		return;

/*
	if (other.takedamage)
	{
		if ( vlen(self.velocity) > 400 )
		{
			ldmg = 40 + 10*random();
			T_Damage (other, self, self, ldmg);
		}
	}
*/
	if (!checkbottom(self))
	  {
		if (self.flags & 512)
		 {
		 //self.touch = SUB_Null;
			 self.touch = MonsterTouch;
		 self.think = gremlin_jump1;
		 self.nextthink = time + 0.1;
		 }
		return; // not on ground yet
	  }

	//self.touch = SUB_Null;
		self.touch = MonsterTouch;
   self.think = gremlin_jump12;
	self.nextthink = time + 0.1;
};

void()	 Gremlin_FlipTouch =
{
//	local	float	ldmg;

	if (!checkbottom(self))
	  {
		if (self.flags & 512)
		 {
		 //self.touch = SUB_Null;
			 self.touch = MonsterTouch;
		 self.think = gremlin_flip1;
		 self.nextthink = time + 0.1;
		 }
		return; // not on ground yet
	  }

	//self.touch = SUB_Null;
	self.touch = MonsterTouch;
   self.think = gremlin_flip8;
	self.nextthink = time + 0.1;
};

//=========================
//
// Hipnotic Sub-routines
//
//=========================


//=========================
//
// SUB_CopyEntity
//
//=========================

void (entity srcent, entity destent) SUB_CopyEntity =
{
   destent.modelindex=srcent.modelindex;
   destent.absmin=srcent.absmin;
   destent.absmax=srcent.absmax;
   destent.ltime=srcent.ltime;
   destent.movetype=srcent.movetype;
   destent.solid=srcent.solid;
   destent.origin=srcent.origin;
   destent.oldorigin=srcent.oldorigin;
   destent.velocity=srcent.velocity;
   destent.angles=srcent.angles;
   destent.avelocity=srcent.avelocity;
   //destent.punchangle=srcent.punchangle;
   destent.classname=srcent.classname;
   destent.model=srcent.model;
   destent.frame=srcent.frame;
   destent.skin=srcent.skin;
   destent.effects=srcent.effects;
   destent.mins=srcent.mins;
   destent.maxs=srcent.maxs;
   destent.size=srcent.size;
   destent.touch=srcent.touch;
   destent.use=srcent.use;
   destent.think=srcent.think;
   destent.blocked=srcent.blocked;
   destent.nextthink=srcent.nextthink;
   destent.groundentity=srcent.groundentity;
   destent.health=srcent.health;
   destent.frags=srcent.frags;
   destent.weapon=srcent.weapon;
   destent.weaponmodel=srcent.weaponmodel;
   destent.weaponframe=srcent.weaponframe;
   destent.currentammo=srcent.currentammo;
   destent.ammo_shells=srcent.ammo_shells;
   destent.ammo_nails=srcent.ammo_nails;
   destent.ammo_rockets=srcent.ammo_rockets;
   destent.ammo_cells=srcent.ammo_cells;
   destent.items=srcent.items;
   destent.takedamage=srcent.takedamage;
   destent.chain=srcent.chain;
   destent.deadflag=srcent.deadflag;
   destent.view_ofs=srcent.view_ofs;
   destent.button0=srcent.button0;
   destent.button1=srcent.button1;
   destent.button2=srcent.button2;
   destent.impulse=srcent.impulse;
   destent.fixangle=srcent.fixangle;
   destent.v_angle=srcent.v_angle;
   //destent.idealpitch=srcent.idealpitch;
   destent.netname=srcent.netname;
   destent.enemy=srcent.enemy;
   destent.flags=srcent.flags;
   destent.colormap=srcent.colormap;
   destent.team=srcent.team;
   destent.max_health=srcent.max_health;
   destent.teleport_time=srcent.teleport_time;
   destent.armortype=srcent.armortype;
   destent.armorvalue=srcent.armorvalue;
   destent.waterlevel=srcent.waterlevel;
   destent.watertype=srcent.watertype;
   destent.ideal_yaw=srcent.ideal_yaw;
   destent.yaw_speed=srcent.yaw_speed;
   destent.aiment=srcent.aiment;
   destent.goalentity=srcent.goalentity;
   destent.spawnflags=srcent.spawnflags;
   destent.target=srcent.target;
   destent.targetname=srcent.targetname;
   destent.dmg_take=srcent.dmg_take;
   destent.dmg_save=srcent.dmg_save;
   destent.dmg_inflictor=srcent.dmg_inflictor;
   destent.owner=srcent.owner;
   destent.movedir=srcent.movedir;
   destent.message=srcent.message;
   destent.sounds=srcent.sounds;
   destent.noise=srcent.noise;
   destent.noise1=srcent.noise1;
   destent.noise2=srcent.noise2;
   destent.noise3=srcent.noise3;
   destent.wad=srcent.wad;
   destent.map=srcent.map;
   destent.worldtype=srcent.worldtype;
   destent.killtarget=srcent.killtarget;
   destent.light_lev=srcent.light_lev;
   destent.style=srcent.style;
   destent.th_stand=srcent.th_stand;
   destent.th_walk=srcent.th_walk;
   destent.th_run=srcent.th_run;
   destent.th_missile=srcent.th_missile;
   destent.th_melee=srcent.th_melee;
   destent.th_pain=srcent.th_pain;
   destent.th_die=srcent.th_die;
   //destent.th_turn=srcent.th_turn;
   destent.oldenemy=srcent.oldenemy;
   destent.speed=srcent.speed;
   destent.lefty=srcent.lefty;
   destent.search_time=srcent.search_time;
   destent.attack_state=srcent.attack_state;
   destent.walkframe=srcent.walkframe;
   destent.attack_finished=srcent.attack_finished;
   destent.pain_finished=srcent.pain_finished;
   destent.invincible_finished=srcent.invincible_finished;
   destent.invisible_finished=srcent.invisible_finished;
   destent.super_damage_finished=srcent.super_damage_finished;
   destent.radsuit_finished=srcent.radsuit_finished;
   destent.invincible_time=srcent.invincible_time;
   destent.invincible_sound=srcent.invincible_sound;
   destent.invisible_time=srcent.invisible_time;
   destent.invisible_sound=srcent.invisible_sound;
   destent.super_time=srcent.super_time;
   destent.super_sound=srcent.super_sound;
   destent.rad_time=srcent.rad_time;
   destent.fly_sound=srcent.fly_sound;
   destent.axhitme=srcent.axhitme;
   destent.show_hostile=srcent.show_hostile;
   destent.jump_flag=srcent.jump_flag;
   destent.swim_flag=srcent.swim_flag;
   destent.air_finished=srcent.air_finished;
   destent.bubble_count=srcent.bubble_count;
   destent.deathtype=srcent.deathtype;
   destent.mdl=srcent.mdl;
   destent.mangle=srcent.mangle;
   destent.oldorigin=srcent.oldorigin;
   destent.t_length=srcent.t_length;
   destent.t_width=srcent.t_width;
   destent.dest=srcent.dest;
   destent.dest1=srcent.dest1;
   destent.dest2=srcent.dest2;
   destent.wait=srcent.wait;
   destent.delay=srcent.delay;
   destent.trigger_field=srcent.trigger_field;
   destent.noise4=srcent.noise4;
   destent.pausetime=srcent.pausetime;
   destent.movetarget=srcent.movetarget;
   destent.aflag=srcent.aflag;
   destent.dmg=srcent.dmg;
   destent.cnt=srcent.cnt;
   destent.think1=srcent.think1;
   destent.finaldest=srcent.finaldest;
   destent.finalangle=srcent.finalangle;
   destent.count=srcent.count;
   destent.lip=srcent.lip;
   destent.state=srcent.state;
   destent.pos1=srcent.pos1;
   destent.pos2=srcent.pos2;
   destent.height=srcent.height;
   destent.waitmin=srcent.waitmin;
   destent.waitmax=srcent.waitmax;
   destent.distance=srcent.distance;
   destent.volume=srcent.volume;
   destent.has_camera=srcent.has_camera;
   destent.has_fieldgen=srcent.has_fieldgen;
   
   /*destent.spawnfunction=srcent.spawnfunction;
   destent.spawnthink=srcent.spawnthink;
   destent.spawnmodel=srcent.spawnmodel;
   destent.spawnsolidtype=srcent.spawnsolidtype;
   destent.spawnmins=srcent.spawnmins;
   destent.spawnmaxs=srcent.spawnmaxs;
   destent.spawnclassname=srcent.spawnclassname;*/
};

// OfN - Frame stuff added

void()	 gremlin_gstand1   =[ $glook1,	   gremlin_gstand2] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand2   =[ $glook2,	   gremlin_gstand3] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand3   =[ $glook3,	   gremlin_gstand4] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand4   =[ $glook4,	   gremlin_gstand5] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand5   =[ $glook5,	   gremlin_gstand6] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand6   =[ $glook6,	   gremlin_gstand7] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand7   =[ $glook7,	   gremlin_gstand8] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand8   =[ $glook8,	   gremlin_gstand9] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand9   =[ $glook9,	   gremlin_gstand10] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand10	=[ $glook10,	 gremlin_gstand11] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand11	=[ $glook11,	 gremlin_gstand12] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand12	=[ $glook12,	 gremlin_gstand13] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand13	=[ $glook13,	 gremlin_gstand14] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand14	=[ $glook14,	 gremlin_gstand15] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand15	=[ $glook15,	 gremlin_gstand16] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand16	=[ $glook16,	 gremlin_gstand17] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand17	=[ $glook17,	 gremlin_gstand18] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand18	=[ $glook18,	 gremlin_gstand19] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand19	=[ $glook19,	 gremlin_gstand20] {gremlin_stand();self.nextthink = time + 0.15;};
void()	 gremlin_gstand20	=[ $glook20,	 gremlin_gstand1] {gremlin_stand();self.nextthink = time + 0.15;};

void()	 gremlin_gwalk1 =[ $grun1,		gremlin_gwalk2 ] {
if (random() < 0.1)
	sound (self, 2, "grem/idle.wav", 1, 2);
gremlin_walk(0);};
void()	 gremlin_gwalk2 =[ $grun2,		gremlin_gwalk3 ] {gremlin_walk(8);}; // original 8
void()	 gremlin_gwalk3 =[ $grun3,		gremlin_gwalk4 ] {gremlin_walk(12);}; // original 12
void()	 gremlin_gwalk4 =[ $grun4,		gremlin_gwalk5 ] {gremlin_walk(16);}; // original 16
void()	 gremlin_gwalk5 =[ $grun5,		gremlin_gwalk6 ] {gremlin_walk(16);}; // original 16
void()	 gremlin_gwalk6 =[ $grun6,		gremlin_gwalk7 ] {gremlin_walk(12);}; // original 12
void()	 gremlin_gwalk7 =[ $grun7,		gremlin_gwalk8 ] {gremlin_walk(8);}; // original 8
void()	 gremlin_gwalk8 =[ $grun8,		gremlin_gwalk9 ] {gremlin_walk(0);}; // original 0
void()	 gremlin_gwalk9 =[ $grun9,		gremlin_gwalk10 ] {gremlin_walk(8);}; // original 8
void()	 gremlin_gwalk10 =[ $grun10,	  gremlin_gwalk11 ] {gremlin_walk(12);}; // original 12
void()	 gremlin_gwalk11 =[ $grun11,	  gremlin_gwalk12 ] {gremlin_walk(16);}; // original 16
void()	 gremlin_gwalk12 =[ $grun12,	  gremlin_gwalk13 ] {gremlin_walk(16);}; // original 16
void()	 gremlin_gwalk13 =[ $grun13,	  gremlin_gwalk14 ] {gremlin_walk(12);}; // original 12
void()	 gremlin_gwalk14 =[ $grun14,	  gremlin_gwalk15 ] {gremlin_walk(8);}; // original 8
void()	 gremlin_gwalk15 =[ $grun15,	  gremlin_gwalk1 ] {gremlin_walk(0);}; // original 0

//================================================================
// Stand and walk subs to route to correct animations

void() gremlin_main_stand =
{
	if (self.has_fieldgen)
		gremlin_gstand1();
	else
		gremlin_stand1();
};

void() gremlin_main_walk =
{
	if (self.has_fieldgen)
		gremlin_gwalk1();
	else
		gremlin_walk1();	
};

//===========================================================================
// Returns the best possible weapon to steal from a player

float(entity gremlin, entity player) GREM_BestWeaponToSteal =
{
	// Rocket Launcher
	if (player.weapons_carried & 8192 && !(gremlin.weapons_carried & 8192))
		return 8192;
	// Lightning gun
	if (player.weapons_carried & 65536 && !(gremlin.weapons_carried & 65536))
		return 65536;
	// Super Shotgun
	if (player.weapons_carried & 256 && !(gremlin.weapons_carried & 256))
		return 256;    
	// Shotgun
	if (player.weapons_carried & 128 && !(gremlin.weapons_carried & 128))
		return 128;
	// Super Nail Gun
	if (player.weapons_carried & 8388608 && !(gremlin.weapons_carried & 8388608))
		return 8388608;	 
	// Nailgun
	if (player.weapons_carried & 512 && !(gremlin.weapons_carried & 512))
		return 512;	 
	
	return 0;
};

