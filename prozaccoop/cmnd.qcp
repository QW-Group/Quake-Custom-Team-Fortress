/*=======================================================//
// cmnd.QC - CustomTF 3.2.OfN			   - 18/3/2004 - //
// by Sergio FumaÒa Grunwaldt - OfteN [cp]				 //
=========================================================//
 Client Command stuff - Requires PROZAC qwsv
=========================================================//
 This is a giant command system that expands the possible
 commands from users without using aliases, neither
 having almost any limitation.
 --------------------------------------------------------
 Our server code will call ClientCommand() function with
 the appropiate arguments set after a client enters
 any command in console with the "cmd" prefix.
=========================================================*/

// Flags

// Settings














/*===============================================================================================

EXPLANATION OF HOW THE ENTITY FIELDS ARE USED (thnx? np.. :P)
---------------------------------------------

For player entity:
------------------

.option2		- Controls the flow of messages displayed to client (some messages skip this check)
.ex_skill_max	- Controls the flow of client commands (avoids multiple commands to be executed)
.ex_skill_min	- Counter of the times the user attempted to be admin by supplying a bad password
.t_s_h; 		- Monster 1 name string (string using permanent buffer) (#sname1)
.t_s_m; 		- Monster 2 name string (string using permanent buffer) (#sname2)
.t_s_c; 		- Monster 3 name string (string using permanent buffer) (#sname3)
.increase_team1 - Holds number of custom map voting requests this user have made
.increase_team2 - Number of monster name changes this user has performed consecutively
.increase_team3 - Time of silent monster name changes for user or time of last change

================================================================================================

 Commands Structure:
 -------------------

help
  (command)

admin
  login passsword
  logout
  online (shows logged admins)
  tell

  // the following are only accessible by a current admin
  ceasefire [1/on|0/off] (if no argument, just toggle)
  get [user]  
  kick [user]
  ban [user] 
  mute [user [time]]
  curse [user]
  team 1|2|3|4 [user]
  cmnd "command/s" [user]
  TODO: getalias

  // exist but never shown on help, even if an admin
  debug
  infos
  daylight
  storm
  earthquake
  daytime
  runes
  killstuff
  endgame
  silence
  use							// Gizmo - uses the entity that the admin is looking at
  spawn <classname> [team]			// Gizmo - spawns an entity, usually a monster in coop mode
  mass_spawn <classname> [count] [team]	// Gizmo - spawns count entities (4 is default if not specified)
  kill						// Gizmo - kills the entity that the admin is looking at (if allowed)

  stuff
	makefree ITEM PAGE|all
	delfree ITEM PAGE|all
	disable ITEM PAGE|all
	enable ITEM PAGE|all

vote
  map xxxxxx
	agr // PZ - Attackers Go Red mode
	tf	// Gizmo - Team Fortress (non-coop) mode
	coop	// Gizmo - Co-op mode
	insane_coop	// Gizmo - Insane coop mode
  nextmap xxxx
	agr // PZ
	tf	// Gizmo - Team Fortress (non-coop) mode
	coop	// Gizmo - Co-op mode
	insane_coop	// Gizmo - Insane coop mode
  kick xxxxx
  curse xxxx
  ban xxxxx
  mute xxxx
  use							// Gizmo - vote to use an object

Cheater xxxxx "reasons for accusing.."

game
	//summon xxxxx
	sname x monstername
	build xxxxxxx
	fgens [1/on|0/off] (if no argument just toggle)
	//det x
	//disguise x
	//spyskin x
	drop
		items
		runes
		rune x
		cells x
		rockets x
		nails x
		shells x
	weapon weaponname		// Gizmo

==========================================================================================*/

float(string mapstr) validatemap;
float(float itemnum, float page, float permanent) DisableItem;
float(float itemnum, float page, float permanent) EnableItem;

float(float itemnum,float page, float permanent) MakeFree;
float(float itemnum,float page, float permanent) DelFree;

// External functions
void(float oldrunes) UpdateRuneStuff;
float(entity player, float runenum) DropSpecificRune;

//======================================================================================
// The following is used to crash the server, yeah
// I wanted to see server crashing with ents >512 error to test crash logging on qwsv

















//====================================================================================
// To avoid problems, error and help messages on client commands have a limited rate

void(string text) CmdMsg =
{
	if (self.option2 > time)
		return;

	self.option2 = time + 0.4;
	sprint(self,2,text);
};

// Possible help command requests:


	

	// Any player allowed admin commmands
	
	
	
	
	// Admin-only allowed admin commmands
	
	
	
	
	
	
	
	
	
	
	

// Voting

	
	
	
	
	
	
	

// Misc


// Game commands

	
//	  #define CMDHELP_SUMMON		  130
	
	
	

// Special commands

	


//=========================================================================
// Displays help about specific command or subcommand

// Gizmo - modified this function to not use strcat() so we can have exceptionally long strings
void(string cmdstr, string helpstr, string cmdlist, string finalstr) CmdHelpParse =
{
	// this function doesn't use CmdMsg()
	if (self.option2 > time)
		return;

	self.option2 = time + 0.4;

	if (cmdstr != "")
	{
		sprint( self, 2, "Command ¢" );
		sprint( self, 2, cmdstr );
		sprint( self, 2, "¢ description:\n" );
	}

	sprint( self, 2, helpstr );

	if (cmdlist != "")
	{
		sprint( self, 2, "[" );

		//cmdlist = colstr( cmdlist, 2 );		// may not color the string if too long
		sprint( self, 2, cmdlist );

		sprint( self, 2, "]\n" );
	}

	if (finalstr != "")
	{
		sprint( self, 2, finalstr );
	}
};










void(float command) CmdHelp =
{
	if (command == 0)
		CmdHelpParse("","Possible client commands are∫\n","Help Game Vote Admin Special Cheater","To get help on specific commands just type ¢cmd help COMMAND¢\n");
	else if (command == 129)
		CmdHelpParse("Build","Builds an item if you are able to, possible items are:\n","Sentry Tesla Camera Sensor Teleporter Dispenser FieldGen","");
	else if ( command == 133 )
		CmdHelpParse( "Weapon", "Switches to the specified weapon if available, possible weapons are:\n", "Hook Medikit Spanner Axe Sniper AutoRifle Shotgun SuperShotgun Nailgun LightAssault Grenade Pipe Flame Rocket Cluster Incendiary Assault Lightning Daedalus Tranq Railgun Mauser Airfist LaserCannon SNG ZeroGrav", "" );
	/*else if (command == #CMDHELP_SUMMON)
		CmdMsg("Command ¢Summon¢ Description∫\nSummons a monster or teleports a soldier if you are able to, the parameter for this command should be one of:\n(”„Ú·Á –ÈÚ·ÓË· ∆ÈÂÓ‰ ”Ë·Ì‚ÏÂÚ ”ÔÏ‰ÈÂÚ)\n");
	*/
	else if (command == 1)
	{
		if (self.admin_flag)
			CmdHelpParse("Admin","Performs several admin actions, this command requires a subcommand to be one of:\n","LogOut OnLine Get Team Kick Ban Mute Cuff CeaseFire","");
		else
			CmdHelpParse("Admin","Admin related actions, this command requires a subcommand to be one of:\n","OnLine Tell LogIn LogOut","You must log in to use the other admin commands.\n");
	}
	else if (command == 2)
		CmdHelpParse("LogIn","Logs in as an administrator, you must supply a valid password.\n","","");
	else if (command == 3)
		CmdHelpParse("LogOut","Logs out as an administrator.\n","","");
	else if (command == 4)
		CmdHelpParse("OnLine","Displays list of current admins that logged on server.\n","","");
	else if (command == 5)
		CmdHelpParse("Tell","Tells a private message to all admins logged on server, if any.\nSyntax∫ cmd admin tell \"message to admins\"\n","","");
	else if (command == 16)
		CmdHelpParse("CeaseFire","Forces a ceasefire on the server, players will not be able to attack until ceasefire ends.\nSyntax∫ cmd admin ceasefire [on|off]\n","","");
	else if (command == 23)
		CmdHelpParse("Team","Assign given player to the specified team.\nSyntax∫ cmd admin team n [user]\n","","");
	else if (command == 24)
		CmdHelpParse("Cmnd","Executes given commands for the currently selected or specified client.\nSyntax∫ cmd admin cmnd \"commands\" [user]\n","","");
	else if (command == 17)
		CmdHelpParse("Get","Tries to select the given client as target for admin actions, if no parameter is supplied just cycles thru possible clients.\nSyntax∫ cmd admin get [user]\n","","");
	else if (command == 18)
		CmdHelpParse("Kick","Kicks given client, if none specified, currently selected one.\nSyntax∫ cmd admin kick [user]\n","","");
	else if (command == 19)
		CmdHelpParse("Ban","Bans given client from server, if none is specified uses currently selected one.\nSyntax∫ cmd admin ban [user]\n","","");
	else if (command == 20)
		CmdHelpParse("Mute","Mutes a client, if none is specified uses currently selected one.\nSyntax∫ cmd admin mute [user [time]]\n","","");
	else if (command == 21)
		CmdHelpParse("Cuff","Cuffs a client for the specified time.\nSyntax∫ cmd admin cuff [user [time]]\n","","");
	else if (command == 22)
		CmdHelpParse("Curse","Curses given player, if none is specified uses currently selected one.\nSyntax∫ cmd admin curse [user]\n","","");
	else if (command == 25)
		CmdHelpParse("EndGame","Ends the current map.\n","","");
	else if (command == 26)
		CmdHelpParse("Check","Prints information about the specified client.\n","","");
	else if (command == 64)
		CmdHelpParse("Cheater","Accuses given player of cheating, warning other users and logging it on server.\nSyntax∫ cmd cheater (user) [\"Reasons for accusation\"]\n","","");
	else if (command == 32)
		CmdHelpParse("Vote","Commands for starting several kind of votes.\nAvaliable vote types are:\n","Map NextMap Kick Ban Mute Curse Cuff","");
	else if (command == 33)
		CmdHelpParse("Map","Starts voting for a switch to the specified map.\nSyntax∫ cmd vote map (MapName) [agr|tf|coop|insane_coop]\nType ·ÁÚ at the end for Attackers Go Red mode.\n","",""); // PZ - added AGR
	else if (command == 34)
		CmdHelpParse("NextMap","Suggests the specified map as next map.\nSyntax∫ cmd vote nextmap (MapName) [agr|tf|coop|insane_coop]\nType ·ÁÚ at the end for Attackers Go Red mode.\n","",""); // PZ - added AGR
	else if (command == 35)
		CmdHelpParse("Kick","Proposes to kick the specified user from server.\nSyntax∫ cmd vote kick (user)\n","","");
	else if (command == 38)
		CmdHelpParse("Curse","Proposes to curse the specified player.\nSyntax∫ cmd vote curse (user)\n","","");
	else if (command == 36)
		CmdHelpParse("Ban","Proposes to ban the specified user from server.\nSyntax∫ cmd vote ban (user)\n","","");
	else if (command == 37)
		CmdHelpParse("Mute","Proposes to mute the specified client.\nSyntax∫ cmd vote mute (user)\n","","");
	else if (command == 39)
		CmdHelpParse("Cuff","Proposes to cuff the specified player.\nSyntax∫ cmd vote cuff (user)\n","","");
	else if (command == 128)
		CmdHelpParse("Game","Several in-game related commands.\nAvaliable commands are:\n","Drop SName Build Weapon","");
	else if (command == 131)
		CmdHelpParse("SName","Displays or changes the custom names for summons and army soldiers.\nSyntax∫ cmd game sname n [\"CustomName\"]\n","","");
	else if (command == 132)
		CmdHelpParse("Drop","Drops items, runes or ammo. Depending on what to be dropped a number should be specified.\nSyntax∫ cmd game drop (items|runes|rune n|shells n|nails n|rockets n|cells n)\n","","");
	else if (command == 160)
		CmdHelpParse("Special","Several special actions, a subcommand must be one of:\n","GetLit GetSky GetHRT","");
	else if (command == 161)
		CmdHelpParse("GetLit","Attempts to download a coloured lighting file for current map, if it exists.\n","","");
};

//========================================================================
// Reports a bad argument error

void(string text1, string badarg, string text2) CmdBadArg =
{
	local string tmp;

	tmp = strcat(text1, badarg);
	tmp = strcat(tmp,text2);

	CmdMsg(tmp);
};

//========================================================================
// Reports an invalid string as target client for admin or vote command

void(string text) CmdClientErr =
{
	sprint(self,2,"Can't find an unique match for ¢");
	sprint(self,2,text);
	sprint(self,2,"¢!\nYou must specify an user ID or name substring.\n");	
};

//==============================================================
// Returns TRUE if self should be able to start a map vote

float() HisMapVoteAllowed =
{	 
	if (self.goal_no > time)
	{
		CmdMsg("You just have ran a vote!\n");
		return 0;
	}

	if (current_voteent != world)
	{
		CmdMsg("Already running a vote!\n");
		return 0;
	}

	if (time/60 < 1)

	if ( deathmatch || mapname != "start" )

	{
		CmdMsg("Too early for a map change!\n");
		return 0;
	}

	if (ServerUpdating())
	{
		CmdMsg("Server update is taking place, no map changes are allowed!\n");
		return 0;
	}

	return 1;
};

//==============================================================
// Returns TRUE if self has a "punisheable" valid client

float() HisPunishmentAllowed =
{	 
	if (self.goal_no > time)
	{
		CmdMsg("You just have ran a vote!\n");
		return 0;
	}
	else if (current_voteent != world)
	{
		CmdMsg("Already running a vote!\n");
		return 0;
	}
	else if (self.admin_kick == world)
	{
		CmdMsg("No user selected!\n");
		return 0;
	}
	else if (!self.admin_kick.is_connected)
	{
		CmdMsg("User has left the server!\n");
		return 0;
	}
	
	else if (self.admin_kick == self)
	{
		CmdMsg("Are you trying to punish yourself? weird..\n");
		self.admin_kick = world;
		return 0;
	}
	
	else if (self.g_a == 1)
	{
		if (self.admin_kick.classname=="spec")
		{
			CmdMsg("Can't curse spectators!\n");
			return 0;
		}
		else if (self.admin_kick.playerclass == 0)
		{
			CmdBadArg("Player ",self.admin_kick.netname," is observing the game!\n");
			return 0;
		}
		else if (self.admin_kick.done_custom & 4)
		{
			CmdBadArg("Player ",self.admin_kick.netname," is still customizing!\n");
			return 0;
		}
	}
	else if (self.g_a == 5)
	{
		if (self.admin_kick.classname=="spec")
		{
			CmdMsg("Can't cuff spectators!\n");
			return 0;
		}
	}
	
	if (self.admin_kick.classname != "spec" && self.admin_kick.classname != "player")
	{
		CmdMsg("Invalid user selected!\n");
		return 0;
	}
	
	return 1;
};

//==============================================================
// Generic is vote allowed function

float() IsVoteAllowedGeneric = {
	if ( current_voteent != world ) {
		CmdMsg( "Already running a vote!\n" );
		return 0;
	}
	return 1;
};

//===================================================================
// This is the anti-spam mechanism used for monster name changes
// Also used for anti-spam on "cheater" commands

float() MonsterNameAllowed =
{
	if (self.increase_team3 < time)
	{
		if (time - self.increase_team3 < 15)
		{
			self.increase_team2 = self.increase_team2 +1;
			if (self.increase_team2 >= 3)
				self.increase_team3 = time + 30; 					   
		}
		else
		{
			self.increase_team2 = 0;
			self.increase_team3 = time;
		}

		return 1;
	}
	else
	{
		CmdMsg("Don't spam the server please!\n");
		return 0;
	}
};

//===========================================================================================
// A client just typed a command and server hasn't found a regular command handler for it
// If this function returns 0 (FALSE), unhandling is assumed, and "Bad user command" message is shown
// It should return a non-zero value (like TRUE) if it processes the command, even with errors,
// which should be reported by this function itself

float(float num_args, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7) ClientCommand =
{
	// First of all, check if we allow a client command from this user right now..
	if (self.ex_skill_max > time)
		return 1; // dont report anything!
		
	if (self.flags & 8192)
		return 1;
	
	if (intermission_running)
	{
		CmdMsg("No client commands are allowed during an intermission!\n");
		return 1;
	}
	
	if (!self.is_connected)
		return 0;
	 
	if (self.classname != "player" && self.classname != "spec")
		return 1;

	if (num_args <= 0) //NOT NEEDED
		return 0; 

	








	local entity targ;
	local string st;
	local float tmpf, tmpf2;

	// Player/Spectator valid commands:
	if (!strcasecmp(arg1,"admin")) // ADMIN
	{
		// No arguments
		if (num_args < 2)
		{
			CmdHelp(1);
			return 1;
		}

		// Any-player admin commands				
		if (!strcasecmp(arg2,"login")) // ADMIN - LOGIN
		{
			// Check if client is trying to hack the admin password
			if (self.ex_skill_min >= 5)
			{
				CmdMsg("Go away, hacker wannabe!\n");
				return 1;
			}

			// No argument
			if (num_args < 3)
			{
				CmdHelp(2);
				return 1;
			}

			st = infokey(world,"adminpwd");

			// If no adminpwd is set, abort and report it
			if (st == "")
			{
				CmdMsg("Unable to log in as admin, no password has been set!\n");
				return 1;
			}

			if (arg3 == st)
			{
				if (self.admin_flag)
				{
					CmdMsg("Already logged as admin!\n");
					return 1;
				}
				else
				{
					PrintAdmins(0,1); // show our colleagues, if any					 
					sprint(self,2,"Loginç You logged in as admin.\n");
					PlayClientSound(self,"doors/baseuse.wav");
					AdminLoggedIn(self);
					self.admin_flag = 1;
					return 1;
				}
			}
			else
			{
				CmdMsg("Loginç Bad admin password!\n"); 
				PlayClientSound(self,"doors/basetry.wav");
			   
				if (!self.admin_flag) // Not an admin?
					self.ex_skill_max = time + 5; // then do not allow another attempt for x seconds from this user
				else // he was an admin lol
					AdminLoggedOut(self);	 
				
				// increase our hacker detection counter :)
				self.ex_skill_min = self.ex_skill_min + 1;

				self.admin_flag = 0;
				return 1;
			}
		}
		else if (!strcasecmp(arg2,"logout")) // ADMIN - LOGOUT
		{
			if (self.admin_flag)
			{
				sprint(self,2,"You logged out as admin.\n");
				self.admin_flag = 0;
				AdminLoggedOut(self);
				return 1;
			}
			else
			{
				CmdMsg("Not logged as admin!\n");
				return 1;
			}
		}
		else if (!strcasecmp(arg2,"online")) // ADMIN - Show online admins
		{
			if (self.option2 < time)
			{
				PrintAdmins(1,0);
				self.option2 = time + 0.4;
			}
			
			return 1;
		}
		else if (!strcasecmp(arg2,"tell"))
		{
			if (num_args == 2)
			{
				CmdHelp(5);
				return 1;
			}

			if (num_args > 3)
			{
				CmdMsg("Use your message text inside \"quotes like this\"!\n");
				return 1;
			}
			
			Admin_Tell(self,arg3);
			return 1;
		}

		// Admin-only admin commands
		if (self.admin_flag)
		{
			if (mutedtime(self))
			{
				CmdMsg("You have been muted beeing an admin, now think about why...\n");
				return 1;
			}

			if (!strcasecmp(arg2,"get"))
			{
				if (num_args == 2)
				{
					Admin_Kick_Cycle();
					return 1;
				}
				
				targ = getclient(arg3);
				
				if (targ)
				{
					self.admin_kick = targ; //Set current selected person

					if (self.admin_kick.classname == "spec")
						sprint(self, 2, "√ÏÈÂÓÙ ®Spectator©: ");
					else
						sprint(self, 2, "√ÏÈÂÓÙ: ");

					sprint(self, 2, self.admin_kick.netname);
					sprint(self, 2, " selected ®");

					st = ftos(getuid(self.admin_kick));
					//st = colstr(st,4);

					sprint(self, 2, "’ÛÂÚ…ƒ∫",st," …–∫"); 
					st = infokey(self.admin_kick,"ip");
					//st = colstr(st,4);
					sprint(self,2,st,"©\n");

					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"debug"))
			{
				MakeMeDebug(self);
				return 1;
			}
			else if (!strcasecmp(arg2,"infos"))
			{
				UpdateInfos(0);
				if (debug_target!=self) sprint(self,2,"Localinfos updated succesfully.\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"light"))
			{
				st = ftos(current_brightness);

				sprint(self,2,"Current Brightness = ",st,"\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"endgame"))
			{
				Admin_EndGame();
				return 1;
			}
			else if (!strcasecmp(arg2,"killstuff"))
			{
				if (num_args == 2)
				{					 
					Admin_KillStuff();
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_KillStuff();					  
					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			






			else if (!strcasecmp(arg2,"storm"))
			{
				if (num_args == 2)
				{
					st = ftos(storm);

					sprint(self,2,"Storm setting is ",st,"\n");
					return 1;
				}

				tmpf = storm;

				storm = stof(arg3);

				if (storm < 0 || storm > 1)
				{
					sprint(self,2,"Invalid storm setting!\n");
					storm = tmpf;
					return 1;
				}

				if (storm != tmpf)
				{
					sprint(self,2,"New storm setting is applied\n");
					UpdateEnvironment(tmpf,earthquake,daytime,runes);
					return 1;
				}

				sprint(self,2,"No change on storm setting!\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"earthquake"))
			{
				if (num_args == 2)
				{
					st = ftos(earthquake);

					sprint(self,2,"Earthquake setting is ",st,"\n");
					return 1;
				}

				tmpf = earthquake;

				earthquake = stof(arg3);

				if (earthquake < 0 || earthquake > 1)
				{
					sprint(self,2,"Invalid earthquake setting!\n");
					storm = tmpf;
					return 1;
				}

				if (earthquake != tmpf)
				{
					sprint(self,2,"New earthquake setting is applied\n");
					UpdateEnvironment(storm,tmpf,daytime,runes);
					return 1;
				}

				sprint(self,2,"No change on earthquake setting!\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"runes"))
			{
				if (num_args == 2)
				{
					st = ftos(runes);

					sprint(self,2,"Runes setting is ",st,"\n");
					return 1;
				}

				tmpf = runes;

				runes = floor(stof(arg3));

				if (runes < 0 || runes > 4)
				{
					sprint(self,2,"Invalid runes setting! (0-4 allowed)\n");
					runes = tmpf;
					return 1;
				}

				if (runes != tmpf)
				{
					sprint(self,2,"New runes setting is applied\n");
					UpdateEnvironment(storm,earthquake,daytime,tmpf);
					return 1;
				}

				sprint(self,2,"No change on the runes setting!\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"daytime"))
			{
				if (num_args == 2)
				{
					st = ftos(daytime);

					sprint(self,2,"DayTime setting is ",st,"\n");
					return 1;
				}

				tmpf = daytime;

				daytime = stof(arg3);

				if (daytime < 0 || daytime > 360)
				{
					sprint(self,2,"Invalid daytime setting!\n");
					daytime = tmpf;
					return 1;
				}

				if (daytime != tmpf)
				{
					sprint(self,2,"New DayTime setting is applied\n");
					UpdateEnvironment(storm,earthquake,tmpf,runes);
					return 1;
				}

				sprint(self,2,"No change on DayTime setting!\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"daylight"))
			{
				if (daytime != 0)
				{
					sprint(self,2,"Unable to adjust brighness with DayTime enabled!\n");
					return 1;
				}
				
				if (num_args == 2)
				{
					st = ftos(daylight);
					sprint(self,2,"Daylight intensity is ",st,"\n");
					return 1;
				}
				
				tmpf = stof(arg3);
				tmpf = rint(tmpf);

				if (tmpf < 0 || tmpf > 25)
				{
					sprint(self,2,"Valid daylight value ranges from 0 to 25!\n");
					return 1;
				}
				
				targ = FadeWorld(tmpf,0,0,0);

				if (targ)
					targ.has_teleporter = 3; // Set daylight along with fade

				return 1;
			}
			else if (!strcasecmp(arg2,"silence"))
			{
				if (num_args == 2)
				{
					Admin_Silence(0,20);
					return 1;
				}

				tmpf = stof(arg3);

				if (num_args == 3)
				{
					Admin_Silence(0,tmpf);
					return 1;
				}

				if (!strcasecmp(arg4,"players"))
				{
					Admin_Silence(1,tmpf);
					return 1;
				}
				else if (!strcasecmp(arg4,"specs") || !strcasecmp(arg4,"spectators"))
				{
					Admin_Silence(2,tmpf);
					return 1;
				}

				sprint(self,2,"Bad syntax!\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"cuff"))
			{
				st = ftos(10);
				
				if (num_args == 2)
				{					 
					Admin_Cuff(st);
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;

					if (num_args == 3)
						Admin_Cuff(st);
					else
						Admin_Cuff(arg4);

					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"sermon"))
			{				 
				if (num_args < 4)
				{					 
					sprint(self,2,"Sermon command syntax is: cmd admin sermon (player) \"Sermon text\" [kick|ban]\n");
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;
					
					if (num_args > 4)
					{
						if (!strcasecmp(arg5,"ban"))
							Admin_Sermon(arg4,2);	 
						else if (!strcasecmp(arg5,"kick"))
							Admin_Sermon(arg4,1);	 
						else
							Admin_Sermon(arg4,0);
					}	 
					else
						Admin_Sermon(arg4,0);

					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"mute"))
			{
				st = ftos(20);
				
				if (num_args == 2)
				{					 
					Admin_Mute(st);
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;

					if (num_args == 3)
						Admin_Mute(st);
					else
						Admin_Mute(arg4);

					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"curse"))
			{
				if (num_args == 2)
				{
					Admin_Curse();
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_Curse();
					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"kick"))
			{
				if (num_args == 2)
				{
					Admin_Kick_Person();
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_Kick_Person();
					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"ban"))
			{
				if (num_args == 2)
				{
					Admin_Ban_Person();
					return 1;
				}

				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_Ban_Person();
					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"ceasefire"))
			{
				// No argument.. so just toggle it
				if (num_args == 2)
				{
					Admin_Call_Ceasefire();
					return 1;
				}

				if (arg3=="0" || !strcasecmp("off",arg3))
				{
					if (ceasefire)
					{
						Admin_Call_Ceasefire(); 					   
						return 1;
					}
					else
					{
						sprint(self,2,"Ceasefire is already off!\n");
						return 1;
					}
				}
				else if (arg3=="1" || !strcasecmp("on",arg3))
				{
					if (!ceasefire)
					{
						Admin_Call_Ceasefire();
						return 1;
					}
					else
					{
						sprint(self,2,"Already on a Ceasefire!\n");
						return 1;
					}
				}

				// bad ceasefire argument 
				CmdBadArg("√Â·ÛÂ∆ÈÚÂ: Bad parameter ¢",arg3,"¢ passed in!\nType ¢cmd help ceasefire¢ to see possible parameters.\n");
				return 1;
			}
			else if (!strcasecmp(arg2,"team")) // Team assignmnent
			{
				// No argument
				if (num_args == 2)
				{
					CmdHelp(23); // so show help
					return 1;
				}

				// Check if valid team number parameter
				tmpf = stof(arg3);

				if (tmpf < 1 || tmpf > 4)
				{
					CmdBadArg("‘Â·Ì: Bad team number ¢",arg3,"¢ passed in!\nType ¢cmd help team¢ to see possible parameters.\n");
					return 1;
				}

				// No client argument
				if (num_args == 3)
				{
					Admin_Assign(tmpf);
					return 1;
				}

				// Parse Given client argument
				targ = getclient(arg4);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_Assign(tmpf);
					return 1;
				}
				else
				{
					CmdClientErr(arg4);
					return 1;
				}
			}
			else if (!strcasecmp(arg2,"cmnd")) // CMND
			{
				// No argument
				if (num_args == 2)
				{
					CmdHelp(24); // so show help
					return 1;
				}
				
				// No client argument
				if (num_args == 3)
				{
					Admin_Cmd(arg3);
					return 1;
				}

				// Parse Given client argument
				targ = getclient(arg4);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_Cmd(arg3);
					return 1;
				}
				else
				{
					CmdClientErr(arg4);
					return 1;
				}				 
			}
			else if (!strcasecmp(arg2,"check")) // Check
			{
				if (num_args == 2)
				{
					if (!self.admin_kick)
					{
						CmdHelp(26);
						return 1;
					}
					else
					{
						Admin_Check();
						return 1;
					}
				}

				// Parse Given client argument
				targ = getclient(arg3);
				if (targ)
				{
					self.admin_kick = targ;
					Admin_Check();
					return 1;
				}
				else
				{
					CmdClientErr(arg3);
					return 1;
				}

			}
			else if (!strcasecmp(arg2,"stuff")) // Stuff
			{
				if (num_args == 2)
				{
					sprint(self,2,"Syntax: cmd admin stuff disable|enable|makefree|delfree (item) (page) [permanent]\n");
					return 1;
				}

				if (!strcasecmp(arg3,"disable"))
				{
					if (num_args < 5)
					{
						sprint(self,2,"You need to specify a page and item number!\n");
						return 1;
					}

					tmpf = stof(arg4);
					tmpf2 = stof(arg5);

					if (tmpf2 < 1 || tmpf2 > 15 || tmpf < 1 || tmpf > 7)
					{
						sprint(self,2,"Invalid page/item specified!\n");
						return 1;
					}

					sprint(self,2,"Item ",arg4," in page ",arg5," has been disabled");

					if (!(strcasecmp(arg6,"perm")) || !(strcasecmp(arg6,"permanent")))
					{
						sprint(self,2," permanently");
						tmpf = DisableItem(tmpf,tmpf2,1);
					}
					else
						tmpf = DisableItem(tmpf,tmpf2,0);

					if (tmpf)
						sprint(self,2,".\n");
					else
						sprint(self,2," (no change).\n");
						
					return 1;					 
				}
				else if(!strcasecmp(arg3,"enable"))
				{
					if (num_args < 5)
					{
						if (num_args == 4)
						if (!strcasecmp(arg4,"all"))
						{
							if (disabledstuff1 | disabledstuff2 | disabledstuff3 | disabledstuff4 | disabledstuff5)
							{
								disabledstuff1 = disabledstuff2 = disabledstuff3 = disabledstuff4 = disabledstuff5 = 0;
								sprint(self,2,"All items have been enabled.\n");
							}
							else
								sprint(self,2,"No items disabled currently!\n");
							
							return 1;
						}

						sprint(self,2,"You need to specify a page and item number!\n");
						return 1;
					}

					tmpf = stof(arg4);
					tmpf2 = stof(arg5);

					if (tmpf2 < 1 || tmpf2 > 15 || tmpf < 1 || tmpf > 7)
					{
						sprint(self,2,"Invalid page/item specified!\n");
						return 1;
					}

					sprint(self,2,"Item ",arg4," in page ",arg5," has been enabled");

					if (!(strcasecmp(arg6,"perm")) || !(strcasecmp(arg6,"permanent")))
					{
						sprint(self,2," permanently");
						tmpf = EnableItem(tmpf,tmpf2,1);
					}
					else
						tmpf = EnableItem(tmpf,tmpf2,0);

					if (tmpf)
						sprint(self,2,".\n");
					else
						sprint(self,2," (no change).\n");

					return 1;
				}
				else if(!strcasecmp(arg3,"makefree"))
				{
					if (num_args < 5)
					{
						sprint(self,2,"You need to specify a page and item number!\n");
						return 1;
					}

					tmpf = stof(arg4);
					tmpf2 = stof(arg5);

					if (tmpf2 < 1 || tmpf2 > 15 || tmpf < 1 || tmpf > 7)
					{
						sprint(self,2,"Invalid page/item specified!\n");
						return 1;
					}

					sprint(self,2,"Item ",arg4," in page ",arg5," is now free");

					if (!(strcasecmp(arg6,"perm")) || !(strcasecmp(arg6,"permanent")))
					{
						sprint(self,2," permanently");
						tmpf = MakeFree(tmpf,tmpf2,1);
					}
					else
						tmpf = MakeFree(tmpf,tmpf2,0);

					if (tmpf)
						sprint(self,2,".\n");
					else
						sprint(self,2," (no change).\n");
						
					return 1;
				}
				else if(!strcasecmp(arg3,"delfree"))
				{
					if (num_args < 5)
					{
						if (num_args == 4)
						if (!strcasecmp(arg4,"all"))
						{
							if (givenstuff1 | givenstuff2 | givenstuff3 | givenstuff4 | givenstuff5)
							{
								givenstuff1 = givenstuff2 = givenstuff3 = givenstuff4 = givenstuff5 = 0;
								sprint(self,2,"All free items removed.\n");
							}
							else
								sprint(self,2,"No free items currently!\n");
							
							return 1;
						}

						sprint(self,2,"You need to specify a page and item number!\n");
						return 1;
					}

					tmpf = stof(arg4);
					tmpf2 = stof(arg5);

					if (tmpf2 < 1 || tmpf2 > 15 || tmpf < 1 || tmpf > 7)
					{
						sprint(self,2,"Invalid page/item specified!\n");
						return 1;
					}

					sprint(self,2,"Item ",arg4," in page ",arg5," has been removed from free items");

					if (!(strcasecmp(arg6,"perm")) || !(strcasecmp(arg6,"permanent")))
					{
						sprint(self,2," permanently");
						tmpf = DelFree(tmpf,tmpf2,1);
					}
					else
						tmpf = DelFree(tmpf,tmpf2,0);

					if (tmpf)
						sprint(self,2,".\n");
					else
						sprint(self,2," (no change).\n");

					return 1;
				}

				return 1;
			} else if (!strcasecmp(arg2, "use")) {
				Admin_Use ();
				return 1;
			}


			else if ( !strcasecmp( arg2, "spawn" ) ) {
				if ( num_args < 3 ) {
					sprint( self, 2, "You must specify a classname!\nSyntax∫ cmd admin spawn <classname> [team]\n" );
					return 1;
				}

				if ( num_args == 3 )
					Admin_Spawn( arg3, 0 );
				else {
					tmpf = stof( arg4 );
					Admin_Spawn( arg3, tmpf );
				}
				return 1;
			} else if ( !strcasecmp( arg2, "mass_spawn" ) ) {
				if ( num_args < 3 ) {
					sprint( self, 2, "You must specify a classname!\nSyntax∫ cmd admin mass_spawn <classname> [count] [team]\n" );
					return 1;
				}

				if ( num_args == 3 )
					Admin_MassSpawn( arg3, 0, 0 );
				else if ( num_args == 4 ) {
					tmpf = stof( arg4 );
					Admin_MassSpawn( arg3, 0, tmpf );
				} else if ( num_args == 5 ) {
					tmpf = stof( arg4 );
					tmpf2 = stof( arg5 );
					Admin_MassSpawn( arg3, tmpf2, tmpf );
				}
				return 1;
			}

			else if ( !strcasecmp( arg2, "kill" ) ) {
				Admin_Kill();
				return 1;
			}
		}

		// non-valid admin command 
		CmdBadArg("¡‰ÌÈÓ: Bad admin command ¢",arg2,"¢ passed in!\nType ¢cmd help admin¢ to see possible admin commands.\n");
		return 1;
	}
	else if (!strcasecmp(arg1,"help")) // HELP
	{
		// Main help (no argument)
		if (num_args == 1)
		{
			CmdHelp(0);
			return 1;
		}
		
		// help items
		/*if (!strcasecmp(arg2,"build"))
		{
			CmdHelp(#CMDHELP_BUILD);
			return #TRUE;
		}
		else if (!strcasecmp(arg2,"summon"))
		{
			CmdHelp(#CMDHELP_SUMMON);
			return #TRUE;
		}*/

		if (!strcasecmp(arg2,"special"))
		{
			if (num_args == 2)
			{
				CmdHelp(160);
				return 1;
			}

			if (!strcasecmp(arg3,"getlit"))
			{
				CmdHelp(161);
				return 1;
			}

			CmdBadArg("»ÂÏ: Invalid special command ¢",arg3,"¢ passed in!\nType ¢cmd help special¢ to see possible commands.\n");
			return 1;
		}
		else if (!strcasecmp(arg2,"cheater"))
		{
			CmdHelp(64);
			return 1;
		}
		else if (!strcasecmp(arg2,"game"))
		{
			if (num_args == 2)
			{
				CmdHelp(128);
				return 1;
			}

			if (!strcasecmp(arg3,"build"))
			{
				CmdHelp(129);
				return 1;
			}
			else if (!strcasecmp(arg3,"sname"))
			{
				CmdHelp(131);
				return 1;
			}
			else if (!strcasecmp(arg3,"drop"))
			{
				CmdHelp(132);
				return 1;
			}
			else if ( !strcasecmp( arg3, "weapon" ) )
			{
				CmdHelp( 133 );
				return 1;
			}

			// Unknown game command help request
			CmdBadArg("»ÂÏ: Invalid game command ¢",arg3,"¢ passed in!\nType ¢cmd help game¢ to see possible commands.\n");
			return 1;
		}
		else if (!strcasecmp(arg2,"vote"))
		{
			if (num_args == 2)
			{
				CmdHelp(32);
				return 1;
			}

			if (!strcasecmp(arg3,"map"))
			{
				CmdHelp(33);
				return 1;
			}
			else if (!strcasecmp(arg3,"nextmap"))
			{
				CmdHelp(34);
				return 1;
			}
			else if (!strcasecmp(arg3,"kick"))
			{
				CmdHelp(35);
				return 1;
			}
			else if (!strcasecmp(arg3,"ban"))
			{
				CmdHelp(36);
				return 1;
			}
			else if (!strcasecmp(arg3,"cuff"))
			{
				CmdHelp(39);
				return 1;
			}
			else if (!strcasecmp(arg3,"curse"))
			{
				CmdHelp(38);
				return 1;
			}
			else if (!strcasecmp(arg3,"mute"))
			{
				CmdHelp(37);
				return 1;
			}

			// Unknown vote command help request
			CmdBadArg("»ÂÏ: Invalid vote command ¢",arg3,"¢ passed in!\nType ¢cmd help vote¢ to see possible commands.\n");
			return 1;
		}
		else if (!strcasecmp(arg2,"admin"))
		{
			if (num_args == 2)
			{
				CmdHelp(1);
				return 1;
			}

			if (!strcasecmp(arg3,"login"))
			{
				CmdHelp(2);
				return 1;
			}
			else if (!strcasecmp(arg3,"logout"))
			{
				CmdHelp(3);
				return 1;
			}
			else if (!strcasecmp(arg3,"online"))
			{
				CmdHelp(4);
				return 1;
			}
			else if (!strcasecmp(arg3,"ceasefire"))
			{
				CmdHelp(16);
				return 1;
			}
			else if (!strcasecmp(arg3,"get"))
			{
				CmdHelp(17);
				return 1;
			}
			else if (!strcasecmp(arg3,"kick"))
			{
				CmdHelp(18);
				return 1;
			}
			else if (!strcasecmp(arg3,"ban"))
			{
				CmdHelp(19);
				return 1;
			}
			else if (!strcasecmp(arg3,"mute"))
			{
				CmdHelp(20);
				return 1;
			}
			else if (!strcasecmp(arg3,"curse"))
			{
				CmdHelp(22);
				return 1;
			}
			else if (!strcasecmp(arg3,"team"))
			{
				CmdHelp(23);
				return 1;
			}
			else if (!strcasecmp(arg3,"cmnd"))
			{
				CmdHelp(24);
				return 1;
			}
			else if (!strcasecmp(arg3,"cuff"))
			{
				CmdHelp(21);
				return 1;
			}

			// Unknown admin command help request
			CmdBadArg("»ÂÏ: Invalid admin command ¢",arg3,"¢ passed in!\nType ¢cmd help admin¢ to see possible commands.\n");
			return 1;
		}

		// Unknown command help request
		CmdBadArg("»ÂÏ: Unknown command ¢",arg2,"¢ passed in!\nType ¢cmd help¢ to see possible commands.\n");
		return 1;
	}
	else if (!strcasecmp("cheater",arg1))
	{
		// If this player is muted, go away
		if (mutedtime(self))
		{
			CmdMsg("Don't spam the server, please.\n");
			return 1;
		}

		// Extra anti-spam safety
		if (!MonsterNameAllowed())
			return 1;
		
		if (num_args == 1) // no arguments?
		{
			CmdHelp(64); // then show help
			return 1;
		}

		targ = getclient(arg2);
		if (targ)
		{
			
			if (targ == self)
			{
				CmdMsg("You want to accuse yourself of cheating? weird..\n");
				return 1;
			}
			

			if (targ.classname != "player")
			{
				CmdMsg("You can only accuse of cheating a player!\n");
				return 1;
			}
			
			RPrint(self.netname);
			RPrint(" accuses ");
			RPrint(targ.netname);
			if (num_args == 2)
				RPrint(" of cheating\n");
			else
			{
				RPrint(" of cheating. Reason:\n");
				RPrint(arg3);
				RPrint("\n");
			}
			
			bprint(2,"®logged© ");
			bprint(2,self.netname);
			bprint(2," accuses ");
			bprint(2,targ.netname);

			if (num_args == 2)
				bprint(2," of √»≈¡‘…Œ«!\n");
			else
			{
				bprint(2," of √»≈¡‘…Œ«!\n“Â·ÛÔÓ/Û: ");
				bprint(2,arg3);
				bprint(2,"\n");
			}

			st = GetClientDescription(targ);

			bprint(2,"[",targ.netname," claims to be using ",st,"]\n");

			BroadcastSound("zombie/z_hit");
			putsaytime(self);
			return 1;
		}
		else
		{
			CmdClientErr(arg2);
			return 1;
		}		 
	}
	else if (!strcasecmp("vote",arg1))
	{
		if (num_args == 1)
		{
			CmdHelp(32);
			return 1;
		}

		if (mutedtime(self))
		{
			CmdMsg("You are muted, unable to vote!\n");
			return 1;
		}		 

		if (!strcasecmp("nextmap",arg2))
		{
			if (num_args == 2 || arg3 == "")
			{	
				CmdHelp(34);
				return 1;
			}

			if (HisMapVoteAllowed())
			{
				if (self.increase_team1 < 5)
				{
					if (validatemap(arg3))
					{
						// Gizmo - set the first byte to the vote type
						self.group_no = 2;

						if (arg4 != "") // PZ - begin AGR code
						{
							if (!strcasecmp(arg4, "agr"))
								self.group_no = AssignByte2( self.group_no, 1 ); // next map mode with AGR

							else if ( !strcasecmp( arg4, "tf" ) )
								self.group_no = AssignByte2( self.group_no, 2 );
							else if ( !strcasecmp( arg4, "coop" ) )
								self.group_no = AssignByte2( self.group_no, 3 );
							else if ( !strcasecmp( arg4, "insane_coop" ) )
								self.group_no = AssignByte2( self.group_no, 4 );

							else
							{
								sprint3(self, 2, "Unrecognized command argument: ", arg4, "\n");
								return 1;
							}
						}
						else			// PZ - end AGR code
							self.group_no = AssignByte2( self.group_no, 0 );

						StartVoteMap(0,arg3);						 
						return 1;
					}
					else
					{
						sprint(self,2,"The server doesn't have the ¢");
						sprint(self,2,arg3);
						sprint(self,2,"¢ map\n");
					}

					self.increase_team1 = self.increase_team1 + 1;
					return 1;
				}
				else
				{
					st = ftos(5);
					st = strcat("Only ",st);
					st = strcat(st," custom map requests per game is allowed, sorry\n");
					CmdMsg(st);
					return 1;
				}
			}
			else
				return 1;
		}
		else if (!strcasecmp("map",arg2))
		{
			if (num_args == 2 || arg3 == "")
			{	
				CmdHelp(33);
				return 1;
			}			 

			if (HisMapVoteAllowed())
			{
				if (self.increase_team1 < 5)
				{
					if (validatemap(arg3))
					{
						// Gizmo - set the first byte to the vote type
						self.group_no = 3;

						if (arg4 != "") // PZ - begin AGR code
						{
							if (!strcasecmp(arg4, "agr"))
								self.group_no = AssignByte2( self.group_no, 1 ); // switch map mode with AGR

							else if ( !strcasecmp( arg4, "tf" ) )
								self.group_no = AssignByte2( self.group_no, 2 );
							else if ( !strcasecmp( arg4, "coop" ) )
								self.group_no = AssignByte2( self.group_no, 3 );
							else if ( !strcasecmp( arg4, "insane_coop" ) )
								self.group_no = AssignByte2( self.group_no, 4 );

							else
							{
								sprint3(self, 2, "Unrecognized command argument: ", arg4, "\n");
								return 1;
							}
						}
						else			// PZ - end AGR code
							self.group_no = AssignByte2( self.group_no, 0 );

						StartVoteMap(0,arg3);						 
						return 1;
					}
					else
					{
						sprint(self,2,"The server doesn't have the ¢");
						sprint(self,2,arg3);
						sprint(self,2,"¢ map\n");
					}

					self.increase_team1 = self.increase_team1 + 1;
					return 1;
				}
				else
				{
					st = ftos(5);
					st = strcat("Only ",st);
					st = strcat(st," custom map requests per game is allowed, sorry\n");
					CmdMsg(st);
					return 1;
				}
			}
			else
				return 1;
		}
		else if (!strcasecmp(arg2,"kick"))
		{
			if (num_args == 2)
			{	
				CmdHelp(35);
				return 1;
			}

			targ = getclient(arg3);

			if (targ)
			{
				self.admin_kick = targ;
				self.g_a = 2;

				if (HisPunishmentAllowed())
					StartPunishmentVote();
				
				return 1;
			}
			else
			{
				CmdClientErr(arg3);
				return 1;
			}
		}
		else if (!strcasecmp(arg2,"curse"))
		{
			if (num_args == 2)
			{	
				CmdHelp(38);
				return 1;
			}

			targ = getclient(arg3);

			if (targ)
			{
				self.admin_kick = targ;
				self.g_a = 1;

				if (HisPunishmentAllowed())
					StartPunishmentVote();
				
				return 1;
			}
			else
			{
				CmdClientErr(arg3);
				return 1;
			}
		}
		else if (!strcasecmp(arg2,"mute"))
		{
			if (num_args == 2)
			{	
				CmdHelp(37);
				return 1;
			}

			targ = getclient(arg3);

			if (targ)
			{
				self.admin_kick = targ;
				self.g_a = 4;

				if (HisPunishmentAllowed())
					StartPunishmentVote();
				
				return 1;
			}
			else
			{
				CmdClientErr(arg3);
				return 1;
			}
		}
		else if (!strcasecmp(arg2,"cuff"))
		{
			if (num_args == 2)
			{	
				CmdHelp(39);
				return 1;
			}

			targ = getclient(arg3);

			if (targ)
			{
				self.admin_kick = targ;
				self.g_a = 5;

				if (HisPunishmentAllowed())
					StartPunishmentVote();
				
				return 1;
			}
			else
			{
				CmdClientErr(arg3);
				return 1;
			}
		}
		else if (!strcasecmp(arg2,"ban"))
		{
			if (num_args == 2)
			{	
				CmdHelp(36);
				return 1;
			}

			targ = getclient(arg3);

			if (targ)
			{
				self.admin_kick = targ;
				self.g_a = 3;

				if (HisPunishmentAllowed())
					StartPunishmentVote();
				
				return 1;
			}
			else
			{
				CmdClientErr(arg3);
				return 1;
			}
		}
		else if ( !strcasecmp( arg2, "use" ) ) {
			if ( IsVoteAllowedGeneric() )
				StartUseObjectVote ();
			return 1;
		}

		// Unknown vote command
		CmdBadArg("÷ÔÙÂ: Unknown vote command ¢",arg2,"¢ passed in!\nType ¢cmd help vote¢ to see possible commands.\n");
		return 1;
	}
	else if (!strcasecmp(arg1,"special"))
	{
		if (num_args == 1)
		{
			CmdHelp(160);
			return 1;
		}

		if (!strcasecmp(arg2,"getlit"))
		{
			if (self.cltype != 2 && self.cltype != 3 && self.cltype != 4)
			{
				CmdMsg("You must use a coloured lighting capable and compatible client to use this feature, sorry!\n");
				return 1;
			}

			if (validatelit(mapname)) //comperr
			{
				sprint(self,2,"Attempting to download coloured lighting file for the map...\n");
				stuffcmd(self,"download maps/");
				stuffcmd(self,mapname);
				stuffcmd(self,".lit\n");
			}
			else
			{
				CmdMsg("The server doesn't have a coloured lighting file for this map!\n");
			}

			return 1;
		}
		else if (!strcasecmp(arg2,"getsky"))
		{
			if (self.cltype != 2)
			{
				CmdMsg("Feature not compatible with your client, sorry!\n");	
				return 1;
			}

			CmdMsg("Still unimplemented, sorry!\n");
			return 1;
		}
		else if (!strcasecmp(arg2,"gethrt"))
		{
			if (self.cltype != 2)
			{
				CmdMsg("Feature not compatible with your client, sorry!\n");	
				return 1;
			}

			CmdMsg("Still unimplemented, sorry!\n");
			return 1;
		}
		
		// Unknown/invalid special command
		CmdBadArg("”Â„È·Ï: Unknown special command ¢",arg2,"¢ passed in!\nType ¢cmd help special¢ to see possible commands.\n");
		return 1;
	}

	// if we are an spectator, go away.. (return FALSE --> will make server display error to client)
	if (self.classname != "player")
		return 0;

	// Player-only commands:
	if (!strcasecmp(arg1, "game"))
	{
		if (num_args == 1)
		{
			CmdHelp(128);
			return 1;
		}

		if (!strcasecmp(arg2,"drop"))
		{
			if (num_args == 2)
			{
				CmdHelp(132);
				return 1;
			}

			if (!strcasecmp(arg3,"items"))
			{				 
				tmpf = TeamFortress_DropItems();
				
				if (tmpf == 0)
					CmdMsg("You have no items to drop!\n");
				else
				{					 
					if (tmpf > 1)
					{	st = ftos(tmpf);
						st = strcat("You have dropped ",st);
						st = strcat(st," items.\n");
					}
					else
						st = "You have dropped one item.\n";
					
					CmdMsg(st);
				}

				return 1;
			}
			else if (!strcasecmp(arg3,"runes"))
			{
				if (self.runes_owned == 0)
				{
					CmdMsg("You have no runes to drop!\n");
					return 1;
				}

				PlayerDropRunes(self);
				return 1;
			}
			else if (!strcasecmp(arg3,"rune"))
			{
				if (num_args == 3)
				{
					CmdMsg("You should specify which rune to drop!\n");
					return 1;
				}

				tmpf = floor(stof(arg4));

				if (tmpf < 1 || tmpf > 4)
				{
					CmdMsg("Valid rune numbers are from 1 to 4!\n");
					return 1;
				}

				if (DropSpecificRune(self,tmpf))
					return 1;
				else
				{
					CmdMsg("You do not have that rune!\n");
					return 1;
				}
			}
		}		 
		else if (!strcasecmp(arg2,"build")) // BUILD
		{
			if (num_args == 2) // We didnt specify something to build
			{
				CmdHelp(129); //..so show help
				return 1;
			}

			// What should we build?
			if (!strcasecmp(arg3,"sentry"))
			{
				TeamFortress_Build(2,1);
				return 1;
			} 
			else if (!strcasecmp(arg3,"tesla"))
			{
				TeamFortress_Build(3,1);
				return 1;
			}
			else if (!strcasecmp(arg3,"sensor"))
			{
			// TODO    TeamFortress_Build(#BUILD_SENSOR);
				SBBuildSensor();
				return 1;
			}
			else if (!strcasecmp(arg3,"camera"))
			{
				TeamFortress_Build(4,1);
				return 1;
			}
			else if (!strcasecmp(arg3,"teleporter"))
			{
				TeamFortress_Build(5,1);
				return 1;
			}
			else if (!strcasecmp(arg3,"fieldgen"))
			{
				TeamFortress_Build(6,1);
				return 1;
			}
			else if (!strcasecmp(arg3,"dispenser"))
			{
				TeamFortress_Build(1,1);
				return 1;
			}
			
			// Not a valid item to build
			CmdBadArg("¬ıÈÏ‰: Bad item ¢",arg3,"¢ passed in!\nUse ¢cmd help game build¢ to see possible choices.\n");
			return 1;
		}
		else if (!strcasecmp(arg2,"sname"))
		{
			if (num_args == 2)
			{
				CmdHelp(131);
				return 1;
			}

			tmpf = stof(arg3);
			tmpf = rint(tmpf);

			if (tmpf < 1 || tmpf > 3)
			{
				CmdBadArg("”Œ·ÌÂ: Bad name slot ¢",arg3,"¢ specified!\nUse ¢cmd help game sname¢ to see syntax.\n");
				return 1;
			}
			
			if (num_args == 3) // Display name?
			{
				if (tmpf == 1)
				{
					if (self.t_s_h == "")
					{
						CmdMsg("No custom name on slot 1\n");	 
						return 1;
					}
					else
					{
						st = strcat("SName 1 is: ",self.t_s_h);
						st = strcat(st,"\n");
						CmdMsg(st);
						return 1;
					}
				}
				else if (tmpf == 2)
				{
					if (self.t_s_m == "")
					{
						CmdMsg("No custom name on slot 2\n");	 
						return 1;
					}
					else
					{
						st = strcat("SName 2 is: ",self.t_s_m);
						st = strcat(st,"\n");
						CmdMsg(st);
						return 1;
					}
				}
				else if (tmpf == 3)
				{
					if (self.t_s_c == "")
					{
						CmdMsg("No custom name on slot 3\n");	 
						return 1;
					}
					else
					{
						st = strcat("SName 3 is: ",self.t_s_c);
						st = strcat(st,"\n");
						CmdMsg(st);
						return 1;
					}
				}
			}

			// Check for valid string length
			if (strlen(arg4) > 24)
			{			
				CmdMsg("Custom name too long! (maximum is 24 chars)\n");
				return 1;
			}

			// We should set the name then
			if (tmpf == 1)
			{				
				if (arg4 == "") // Empty string as name argument
				{
					if (self.t_s_h != "") // he has a custom name set
					{
						sprint(self,2,"Custom name 1 has been removed.\n");
						
						if (self.demon_one != world && (self.job & 4 || self.job & 128))
						{
							self.demon_one.increase_team2 = GetNameType(self,0,1); // default name type
							MakeMonsterName(self.demon_one);
							
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_one);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.t_s_h);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,self.demon_one.netname);
								bprint(2,"\n");
							}
						}						 
						
						delstr(self.t_s_h);						 
						self.t_s_h = "";
					}
					else
						CmdMsg("Custom name 1 is already empty!\n");
				}
				else // String with something as name argument
				{
					if (self.t_s_h == arg4)
					{
						CmdMsg("No changes on custom name 1\n");
						return 1;
					}
					
					if (self.t_s_h != "") // he has a custom name set
					{
						sprint(self,2,"Custom name 1 has been changed.\n");
						
						if (self.demon_one != world && (self.job & 4 || self.job & 128))
						{
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_one);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.t_s_h);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,arg4);
								bprint(2,"\n");
							}
						}						   

						delstr(self.t_s_h);
						self.t_s_h = makestr(arg4);
					}
					else // no custom name currently..
					{
						sprint(self,2,"Custom name 1 has been set.\n");

						if (self.demon_one != world && (self.job & 4 || self.job & 128))
						{
							self.demon_one.increase_team2 = 0; // custom name type

							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_one);								
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.demon_one.netname);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,arg4);
								bprint(2,"\n");
							}
						}												 

						self.t_s_h = makestr(arg4);
						
						if (self.demon_one != world && (self.job & 4 || self.job & 128))
							self.demon_one.netname = self.t_s_h;
					}
				}
			}
			else if (tmpf == 2)
			{
				if (arg4 == "") // Empty string as name argument
				{
					if (self.t_s_m != "") // he has a custom name set
					{
						sprint(self,2,"Custom name 2 has been removed.\n");
						
						if (self.demon_two != world && (self.job & 4 || self.job & 128))
						{
							self.demon_two.increase_team2 = GetNameType(self,1,1); // default name type
							MakeMonsterName(self.demon_two);
							
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_two);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.t_s_m);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,self.demon_two.netname);
								bprint(2,"\n");
							}
						}						 
						
						delstr(self.t_s_m);						 
						self.t_s_m = "";
					}
					else
						CmdMsg("Custom name 2 is already empty!\n");
				}
				else // String with something as name argument
				{
					if (self.t_s_m == arg4)
					{
						CmdMsg("No changes on custom name 2\n");
						return 1;
					}

					if (self.t_s_m != "") // he has a custom name set
					{
						sprint(self,2,"Custom name 2 has been changed.\n");
						
						if (self.demon_two != world && (self.job & 4 || self.job & 128))
						{
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_two);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.t_s_m);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,arg4);
								bprint(2,"\n");
							}
						}

						delstr(self.t_s_m);
						self.t_s_m = makestr(arg4);
					}
					else // no custom name currently..
					{
						sprint(self,2,"Custom name 2 has been set.\n");

						if (self.demon_two != world && (self.job & 4 || self.job & 128))
						{
							self.demon_two.increase_team2 = 0; // custom name type

							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_two);								
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.demon_two.netname);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,arg4);
								bprint(2,"\n");
							}
						}												 

						self.t_s_m = makestr(arg4);
						
						if (self.demon_two != world && (self.job & 4 || self.job & 128))
							self.demon_two.netname = self.t_s_m;
					}
				}
			}
			else
			{
				if (arg4 == "") // Empty string as name argument
				{
					if (self.t_s_c != "") // he has a custom name set
					{
						sprint(self,2,"Custom name 3 has been removed.\n");
						
						if (self.demon_three != world && (self.job & 4 || self.job & 128))
						{
							self.demon_one.increase_team2 = GetNameType(self,2,1); // default name type
							MakeMonsterName(self.demon_three);
							
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_three);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.t_s_c);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,self.demon_three.netname);
								bprint(2,"\n");
							}
						}						 
						
						delstr(self.t_s_c);						 
						self.t_s_c = "";
					}
					else
						CmdMsg("Custom name 3 is already empty!\n");
				}
				else // String with something as name argument
				{
					if (self.t_s_c == arg4)
					{
						CmdMsg("No changes on custom name 3\n");
						return 1;
					}

					if (self.t_s_c != "") // he has a custom name set
					{
						sprint(self,2,"Custom name 3 has been changed.\n");
						
						if (self.demon_three != world && (self.job & 4 || self.job & 128))
						{
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_three);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.t_s_c);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,arg4);
								bprint(2,"\n");
							}
						}

						delstr(self.t_s_c);
						self.t_s_c = makestr(arg4);
					}
					else // no custom name currently..
					{
						sprint(self,2,"Custom name 3 has been set.\n");

						if (self.demon_three != world && (self.job & 4 || self.job & 128))
						{
							self.demon_three.increase_team2 = 0; // custom name type
							
							if (MonsterNameAllowed())
							if (!mutedtime(self))
							{
								st = GetMonsterName(self.demon_three);
								bprint(2,"The ");
								bprint(2,st);
								bprint(2," ");
								bprint(2,self.demon_three.netname);
								bprint(2," (");
								bprint(2,self.netname);
								bprint(2,") is now known as ");
								bprint(2,arg4);
								bprint(2,"\n");
							}
						}												 

						self.t_s_c = makestr(arg4);
						
						if (self.demon_three != world && (self.job & 4 || self.job & 128))
							self.demon_three.netname = self.t_s_c;
					}
				}
			}

			return 1;
		}
		else if ( !strcasecmp( arg2, "weapon" ) ) {
			if ( num_args == 2 ) {
				CmdHelp( 133 );
				return 1;
			}

			ChangeToWeapon( arg3 );
			return 1;
		}

		// Not a recognized game command 
		CmdBadArg("«·ÌÂ: Unrecognized command ¢",arg2,"¢ passed in!\nUse ¢cmd help game¢ to see avaliable commands.\n");
		return 1;
	}/*
	else if (!strcasecmp(arg1,"summon")) // SUMMON
	{
		if (num_args == 1) // We didnt specify something to summon
		{
			CmdHelp(#CMDHELP_SUMMON); //..so show help
			return #TRUE;
		}

		// What should we summon?
		if (!strcasecmp(arg2,"scrag"))
		{
			CmdMsg("You summon a scrag!\n");
			return #TRUE;
		} 
		else if (!strcasecmp(arg2,"piranha"))
		{
			CmdMsg("You summon a piranha!\n");
			return #TRUE;
		}
		else if (!strcasecmp(arg2,"fiend"))
		{
			CmdMsg("You summon a fiend!\n");
			return #TRUE;
		}
		else if (!strcasecmp(arg2,"shambler"))
		{
			CmdMsg("You summon a shambler!\n");
			return #TRUE;
		}
		else if (!strcasecmp(arg2,"soldier"))
		{
			CmdMsg("You teleport a soldier!\n");
			return #TRUE;
		}
		
		// Not a recognized parameter
		CmdBadArg("”ıÌÌÔÓ: Bad argument ¢",arg2,"¢ passed in!\nUse ¢cmd help summon¢ to see possible choices.\n");
		return #TRUE;
	}*/

	// Not a command handled by us..
	return 0;
};

//========================================================================
// Subroutine to check if a map exists on server

float(string mapstr) validatemap =
{
	mapstr = strcat("maps/",mapstr);
	mapstr = strcat(mapstr,".bsp");

	return validatefile(mapstr);
};

//========================================================================
// Functions to enable/disable specific items using "cmd" commands

float(float itemnum, float page, float permanent) DisableItem =
{
	local float fieldnum;
	local float curval;
	local float bit;

	fieldnum = floor((page - 1) /3)+1;
	curval = DisabledStuff(fieldnum);
	bit = (itemnum + ((page - 1)*7)) - ((fieldnum - 1)*3*7);
	bit = itob(bit);

	if (curval & bit)
		return 0;
	else
	{
		SetDisabledStuff(fieldnum,curval | bit);

		if (permanent)
		{
			local string st;
			st = ftos(fieldnum);
			localcmd("localinfo dstuff");
			localcmd(st);
			st = ftos(curval | bit);
			localcmd(" ");
			localcmd(st);
			localcmd("\n");
		}

		return 1;
	}
};

float(float itemnum, float page, float permanent) EnableItem =
{
	local float fieldnum;
	local float curval;
	local float bit;

	fieldnum = floor((page - 1)/3)+1;
	curval = DisabledStuff(fieldnum);
	bit = (itemnum + ((page - 1)*7)) - ((fieldnum - 1)*3*7);
	bit = itob(bit);

	if (curval & bit)
	{
		SetDisabledStuff(fieldnum,curval - bit);

		if (permanent)
		{
			local string st;
			st = ftos(fieldnum);
			localcmd("localinfo dstuff");
			localcmd(st);
			st = ftos(curval - bit);
			localcmd(" ");
			localcmd(st);
			localcmd("\n");
		}

		return 1;
	}
	else
		return 0;
};

float(float itemnum, float page, float permanent) MakeFree =
{
	local float fieldnum;
	local float curval;
	local float bit;

	fieldnum = floor((page - 1)/3)+1;
	curval = GivenStuff(fieldnum);
	bit = (itemnum + ((page - 1)*7)) - ((fieldnum - 1)*3*7);		
	bit = itob(bit);

	if (curval & bit)
		return 0;
	else
	{
		SetGivenStuff(fieldnum,curval | bit);

		if (permanent)
		{
			local string st;
			st = ftos(fieldnum);
			localcmd("localinfo gstuff");
			localcmd(st);
			st = ftos(curval | bit);
			localcmd(" ");
			localcmd(st);
			localcmd("\n");
		}

		return 1;
	}
};

float(float itemnum, float page, float permanent) DelFree =
{
	local float fieldnum;
	local float curval;
	local float bit;

	fieldnum = floor((page - 1)/3)+1;
	curval = GivenStuff(fieldnum);
	bit = (itemnum + ((page - 1)*7)) - ((fieldnum - 1)*3*7);
	bit = itob(bit);

	if (curval & bit)
	{
		SetGivenStuff(fieldnum,curval - bit);

		if (permanent)
		{
			local string st;
			st = ftos(fieldnum);
			localcmd("localinfo gstuff");
			localcmd(st);
			st = ftos(curval - bit);
			localcmd(" ");
			localcmd(st);
			localcmd("\n");
		}

		return 1;
	}
	else
		return 0;
};
